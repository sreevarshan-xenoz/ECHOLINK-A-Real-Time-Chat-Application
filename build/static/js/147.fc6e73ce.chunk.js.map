{"version":3,"file":"static/js/147.fc6e73ce.chunk.js","mappings":"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","sources":["components/GitHubHome.js","components/GitHubFeatureCards.js","components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { githubService } from '../services/github-service';\nimport { Link, useNavigate } from 'react-router-dom';\nimport GitHubFeatureCards from './GitHubFeatureCards';\nimport './GitHubHome.css';\n\nconst GitHubHome = () => {\n    const [isConnected, setIsConnected] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [userData, setUserData] = useState(null);\n    const [repositories, setRepositories] = useState([]);\n    const [filteredRepos, setFilteredRepos] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [filter, setFilter] = useState('all'); // all, sources, forks, private, public\n    const [sortBy, setSortBy] = useState('updated'); // updated, name, stars\n    const [notification, setNotification] = useState({ show: false, message: '', type: '' });\n    const [stats, setStats] = useState({ totalRepos: 0, totalStars: 0, totalForks: 0 });\n    const [searchMode, setSearchMode] = useState('local'); // local or global\n    const [searchResults, setSearchResults] = useState([]);\n    const [searchOptions, setSearchOptions] = useState({\n        language: '',\n        sort: 'stars',\n        order: 'desc',\n        page: 1,\n        per_page: 30\n    });\n    const [totalSearchResults, setTotalSearchResults] = useState(0);\n    \n    const navigate = useNavigate();\n\n    useEffect(() => {\n        initializeGitHub();\n    }, []);\n\n    // Filter repositories based on search and filters\n    useEffect(() => {\n        if (searchMode === 'global') {\n            // Global search is handled by the searchGitHub function\n            return;\n        }\n\n        if (repositories.length === 0) {\n            setFilteredRepos([]);\n            return;\n        }\n\n        let results = [...repositories];\n        \n        // Apply search query\n        if (searchQuery.trim()) {\n            const query = searchQuery.toLowerCase();\n            results = results.filter(repo => \n                repo.name.toLowerCase().includes(query) ||\n                (repo.description && repo.description.toLowerCase().includes(query))\n            );\n        }\n        \n        // Apply filters\n        if (filter === 'sources') {\n            results = results.filter(repo => !repo.fork);\n        } else if (filter === 'forks') {\n            results = results.filter(repo => repo.fork);\n        } else if (filter === 'private') {\n            results = results.filter(repo => repo.private);\n        } else if (filter === 'public') {\n            results = results.filter(repo => !repo.private);\n        }\n        \n        // Apply sorting\n        results.sort((a, b) => {\n            if (sortBy === 'name') {\n                return a.name.localeCompare(b.name);\n            } else if (sortBy === 'stars') {\n                return b.stargazers_count - a.stargazers_count;\n            } else { // updated\n                return new Date(b.updated_at) - new Date(a.updated_at);\n            }\n        });\n        \n        setFilteredRepos(results);\n    }, [repositories, searchQuery, filter, sortBy, searchMode]);\n\n    const searchGitHub = async () => {\n        if (!searchQuery.trim()) {\n            setSearchResults([]);\n            setTotalSearchResults(0);\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const results = await githubService.searchRepositories(searchQuery, searchOptions);\n            setSearchResults(results.items);\n            setTotalSearchResults(results.total_count);\n        } catch (error) {\n            console.error('Error searching GitHub:', error);\n            showNotification('Failed to search GitHub repositories', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const initializeGitHub = async () => {\n        try {\n            setLoading(true);\n            \n            // Check if GitHub is configured\n            if (!githubService.isConfigured) {\n                showNotification('GitHub integration is not configured. Please set up your GitHub credentials in the .env file.', 'error');\n                setLoading(false);\n                return;\n            }\n            \n            const initialized = await githubService.initialize();\n            setIsConnected(initialized);\n            \n            if (initialized) {\n                const userData = githubService.getUserData();\n                setUserData(userData);\n                await loadRepositories();\n            }\n        } catch (error) {\n            console.error('Error initializing GitHub:', error);\n            showNotification('Failed to initialize GitHub integration', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const loadRepositories = async () => {\n        try {\n            setLoading(true);\n            const repos = await githubService.getRepositories();\n            setRepositories(repos);\n            \n            // Calculate stats\n            const totalStars = repos.reduce((sum, repo) => sum + repo.stargazers_count, 0);\n            const totalForks = repos.reduce((sum, repo) => sum + repo.forks_count, 0);\n            \n            setStats({\n                totalRepos: repos.length,\n                totalStars,\n                totalForks\n            });\n        } catch (error) {\n            console.error('Error loading repositories:', error);\n            showNotification('Failed to load repositories', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRepositoryClick = (repo) => {\n        navigate(`/github/repository/${repo.owner.login}/${repo.name}`);\n    };\n\n    const connectGitHub = () => {\n        try {\n            const authUrl = githubService.getAuthUrl();\n            console.log('Redirecting to GitHub auth URL:', authUrl);\n            window.location.href = authUrl;\n        } catch (error) {\n            console.error('Error initiating GitHub connection:', error);\n            showNotification('Failed to connect to GitHub: ' + error.message, 'error');\n        }\n    };\n\n    const disconnectGitHub = async () => {\n        try {\n            await githubService.disconnect();\n            setIsConnected(false);\n            setUserData(null);\n            setRepositories([]);\n            setFilteredRepos([]);\n            showNotification('GitHub account disconnected successfully', 'success');\n        } catch (error) {\n            showNotification('Failed to disconnect GitHub account', 'error');\n        }\n    };\n    \n    const showNotification = (message, type) => {\n        setNotification({ show: true, message, type });\n        setTimeout(() => setNotification({ show: false, message: '', type: '' }), 3000);\n    };\n\n    const debugGitHubConnection = async () => {\n        try {\n            setLoading(true);\n            showNotification('Running GitHub connection diagnostics...', 'info');\n            \n            // Check if we have a GitHub code in the URL\n            const urlParams = new URLSearchParams(window.location.search);\n            const code = urlParams.get('code');\n            const state = urlParams.get('state');\n            \n            console.log('GitHub Integration Debug:');\n            console.log('- URL has code param:', !!code);\n            console.log('- URL has state param:', !!state);\n            console.log('- GitHub service configured:', githubService.isConfigured);\n            console.log('- Client ID available:', !!process.env.REACT_APP_GITHUB_CLIENT_ID);\n            console.log('- Redirect URI:', githubService.redirectUri);\n            \n            // Try to initialize without relying on URL params\n            const initialized = await githubService.initialize();\n            console.log('- Service initialized:', initialized);\n            \n            showNotification('Diagnostic data logged to console', 'info');\n        } catch (error) {\n            console.error('Debug error:', error);\n            showNotification('Error during diagnostics: ' + error.message, 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    if (loading && !isConnected) {\n        return (\n            <div className=\"github-home-loading\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading GitHub integration...</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"github-home-container\">\n            <div className=\"github-home-header\">\n                <h1>GitHub Integration</h1>\n                <p>Connect your GitHub account to collaborate on code</p>\n                \n                {isConnected && userData && (\n                    <div className=\"github-user-summary\">\n                        <img src={userData.avatar_url} alt=\"GitHub Avatar\" className=\"github-avatar\" />\n                        <div>\n                            <h3>{userData.name || userData.login}</h3>\n                            <p>@{userData.login}</p>\n                            \n                            <div className=\"github-stats\">\n                                <div className=\"stat-item\">\n                                    <span className=\"stat-value\">{stats.totalRepos}</span>\n                                    <span className=\"stat-label\">Repositories</span>\n                                </div>\n                                <div className=\"stat-item\">\n                                    <span className=\"stat-value\">{stats.totalStars}</span>\n                                    <span className=\"stat-label\">Total Stars</span>\n                                </div>\n                                <div className=\"stat-item\">\n                                    <span className=\"stat-value\">{stats.totalForks}</span>\n                                    <span className=\"stat-label\">Total Forks</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {!isConnected ? (\n                <div className=\"github-connect-section\">\n                    <div className=\"github-connect-card\">\n                        <div className=\"github-logo\">\n                            <svg height=\"68\" viewBox=\"0 0 16 16\" width=\"68\">\n                                <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path>\n                            </svg>\n                        </div>\n                        <h3>Connect to GitHub</h3>\n                        <p>Link your GitHub account to access your repositories and collaborate on code directly from ECHOLINK.</p>\n                        <button className=\"github-connect-button\" onClick={connectGitHub}>\n                            Connect GitHub Account\n                        </button>\n                        <button className=\"github-debug-button\" onClick={debugGitHubConnection}>\n                            Diagnose Connection Issues\n                        </button>\n                    </div>\n                    \n                    <GitHubFeatureCards />\n                </div>\n            ) : (\n                <div className=\"github-connected-content\">\n                    <div className=\"github-toolbar\">\n                        <div className=\"search-and-filter\">\n                            <div className=\"search-container\">\n                                <div className=\"search-mode-toggle\">\n                                    <button \n                                        className={`mode-button ${searchMode === 'local' ? 'active' : ''}`}\n                                        onClick={() => setSearchMode('local')}\n                                    >\n                                        My Repositories\n                                    </button>\n                                    <button \n                                        className={`mode-button ${searchMode === 'global' ? 'active' : ''}`}\n                                        onClick={() => setSearchMode('global')}\n                                    >\n                                        Search GitHub\n                                    </button>\n                                </div>\n\n                                <div className=\"search-box\">\n                                    <input\n                                        type=\"text\"\n                                        placeholder={searchMode === 'local' ? \"Search your repositories...\" : \"Search all GitHub repositories...\"}\n                                        value={searchQuery}\n                                        onChange={(e) => setSearchQuery(e.target.value)}\n                                        onKeyPress={(e) => {\n                                            if (e.key === 'Enter' && searchMode === 'global') {\n                                                searchGitHub();\n                                            }\n                                        }}\n                                    />\n                                    {searchMode === 'global' && (\n                                        <button onClick={searchGitHub} className=\"search-button\">\n                                            Search\n                                        </button>\n                                    )}\n                                </div>\n\n                                {searchMode === 'global' && (\n                                    <div className=\"search-options\">\n                                        <select\n                                            value={searchOptions.language}\n                                            onChange={(e) => setSearchOptions({ ...searchOptions, language: e.target.value })}\n                                        >\n                                            <option value=\"\">All Languages</option>\n                                            <option value=\"javascript\">JavaScript</option>\n                                            <option value=\"python\">Python</option>\n                                            <option value=\"java\">Java</option>\n                                            <option value=\"typescript\">TypeScript</option>\n                                            <option value=\"cpp\">C++</option>\n                                            <option value=\"csharp\">C#</option>\n                                            <option value=\"php\">PHP</option>\n                                            <option value=\"ruby\">Ruby</option>\n                                            <option value=\"go\">Go</option>\n                                            <option value=\"rust\">Rust</option>\n                                        </select>\n                                        <select\n                                            value={searchOptions.sort}\n                                            onChange={(e) => setSearchOptions({ ...searchOptions, sort: e.target.value })}\n                                        >\n                                            <option value=\"stars\">Stars</option>\n                                            <option value=\"forks\">Forks</option>\n                                            <option value=\"updated\">Updated</option>\n                                        </select>\n                                        <select\n                                            value={searchOptions.order}\n                                            onChange={(e) => setSearchOptions({ ...searchOptions, order: e.target.value })}\n                                        >\n                                            <option value=\"desc\">Descending</option>\n                                            <option value=\"asc\">Ascending</option>\n                                        </select>\n                                    </div>\n                                )}\n\n                                {searchMode === 'local' && (\n                                    <div className=\"filter-container\">\n                                        <select\n                                            value={filter}\n                                            onChange={(e) => setFilter(e.target.value)}\n                                            className=\"repo-filter-select\"\n                                        >\n                                            <option value=\"all\">All Repositories</option>\n                                            <option value=\"sources\">Sources</option>\n                                            <option value=\"forks\">Forks</option>\n                                            <option value=\"private\">Private</option>\n                                            <option value=\"public\">Public</option>\n                                        </select>\n                                        <select\n                                            value={sortBy}\n                                            onChange={(e) => setSortBy(e.target.value)}\n                                            className=\"repo-sort-select\"\n                                        >\n                                            <option value=\"updated\">Last Updated</option>\n                                            <option value=\"name\">Name</option>\n                                            <option value=\"stars\">Stars</option>\n                                        </select>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        \n                        <button className=\"github-disconnect-button\" onClick={disconnectGitHub}>\n                            Disconnect from GitHub\n                        </button>\n                    </div>\n                    \n                    <div className=\"repositories-container\">\n                        {searchMode === 'global' ? (\n                            searchResults.length > 0 ? (\n                                searchResults.map(repo => (\n                                    <div \n                                        key={repo.id} \n                                        className=\"repository-card\"\n                                        onClick={() => handleRepositoryClick(repo)}\n                                    >\n                                        <div className=\"repo-card-header\">\n                                            <div className=\"repo-icon\">{repo.fork ? '🍴' : '📁'}</div>\n                                            <h3 className=\"repo-name\">{repo.name}</h3>\n                                            {repo.private && (\n                                                <span className=\"repo-private-badge\">Private</span>\n                                            )}\n                                        </div>\n                                        <p className=\"repo-description\">\n                                            {repo.description || 'No description provided'}\n                                        </p>\n                                        <div className=\"repo-card-footer\">\n                                            {repo.language && (\n                                                <div className=\"repo-language\">\n                                                    <span className={`language-color ${repo.language.toLowerCase()}`}></span>\n                                                    {repo.language}\n                                                </div>\n                                            )}\n                                            <div className=\"repo-stats\">\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">⭐</span>\n                                                    {repo.stargazers_count}\n                                                </span>\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">🍴</span>\n                                                    {repo.forks_count}\n                                                </span>\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">📅</span>\n                                                    {new Date(repo.updated_at).toLocaleDateString()}\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            ) : searchQuery ? (\n                                <div className=\"no-results-message\">\n                                    No repositories found matching your search\n                                </div>\n                            ) : null\n                        ) : (\n                            filteredRepos.length > 0 ? (\n                                filteredRepos.map(repo => (\n                                    <div \n                                        key={repo.id} \n                                        className=\"repository-card\"\n                                        onClick={() => handleRepositoryClick(repo)}\n                                    >\n                                        <div className=\"repo-card-header\">\n                                            <div className=\"repo-icon\">{repo.fork ? '🍴' : '📁'}</div>\n                                            <h3 className=\"repo-name\">{repo.name}</h3>\n                                            {repo.private && (\n                                                <span className=\"repo-private-badge\">Private</span>\n                                            )}\n                                        </div>\n                                        <p className=\"repo-description\">\n                                            {repo.description || 'No description provided'}\n                                        </p>\n                                        <div className=\"repo-card-footer\">\n                                            {repo.language && (\n                                                <div className=\"repo-language\">\n                                                    <span className={`language-color ${repo.language.toLowerCase()}`}></span>\n                                                    {repo.language}\n                                                </div>\n                                            )}\n                                            <div className=\"repo-stats\">\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">⭐</span>\n                                                    {repo.stargazers_count}\n                                                </span>\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">🍴</span>\n                                                    {repo.forks_count}\n                                                </span>\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">📅</span>\n                                                    {new Date(repo.updated_at).toLocaleDateString()}\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            ) : repositories.length > 0 ? (\n                                <div className=\"no-results-message\">\n                                    No repositories match your filters\n                                </div>\n                            ) : (\n                                <div className=\"no-repos-message\">\n                                    No repositories found\n                                </div>\n                            )\n                        )}\n                    </div>\n\n                    {searchMode === 'global' && totalSearchResults > searchOptions.per_page && (\n                        <div className=\"pagination\">\n                            <button \n                                onClick={() => setSearchOptions({ ...searchOptions, page: searchOptions.page - 1 })}\n                                disabled={searchOptions.page === 1}\n                            >\n                                Previous\n                            </button>\n                            <span>Page {searchOptions.page}</span>\n                            <button \n                                onClick={() => setSearchOptions({ ...searchOptions, page: searchOptions.page + 1 })}\n                                disabled={searchResults.length < searchOptions.per_page}\n                            >\n                                Next\n                            </button>\n                        </div>\n                    )}\n                </div>\n            )}\n            \n            {notification.show && (\n                <div className={`github-notification ${notification.type}`}>\n                    {notification.message}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default GitHubHome;","import React from 'react';\r\n\r\nconst GitHubFeatureCards = () => {\r\n  return (\r\n    <div className=\"github-features\">\r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">📁</div>\r\n        <h4>Repository Access</h4>\r\n        <p>Browse and search all your GitHub repositories directly from ECHOLINK</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">💻</div>\r\n        <h4>Code Viewing & Editing</h4>\r\n        <p>View and edit code files with syntax highlighting and automatic saving</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">👥</div>\r\n        <h4>Collaborative Editing</h4>\r\n        <p>Edit code files together in real-time with your connected peers</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">📊</div>\r\n        <h4>Repository Analytics</h4>\r\n        <p>See detailed analytics about your repositories including commit activity</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">🔄</div>\r\n        <h4>Commit Changes</h4>\r\n        <p>Make changes to your code and commit them directly to GitHub</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">🔍</div>\r\n        <h4>Search & Filter</h4>\r\n        <p>Find repositories and files quickly with powerful search capabilities</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GitHubFeatureCards;","import React, { useState, useEffect } from 'react';\nimport './Dashboard.css';\nimport { supabase } from '../services/supabase-service';\nimport { Link, useLocation } from 'react-router-dom';\nimport GitHubIntegration from './GitHubIntegration';\nimport GitHubFeatureCards from './GitHubFeatureCards';\nimport GitHubHome from './GitHubHome';\nimport './GitHubHome.css';\nimport aiService from '../services/ai-service';\nimport { githubService } from '../services/github-service';\n\nconst Dashboard = () => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [name, setName] = useState('');\n    const [avatar, setAvatar] = useState(null);\n    const [theme, setTheme] = useState('light');\n    const [notification, setNotification] = useState({ show: false, message: '', type: '' });\n    const [activeView, setActiveView] = useState('github'); // 'github' or 'profile'\n    const location = useLocation();\n    const [chatPreferences, setChatPreferences] = useState({\n        messageDensity: 'comfortable',\n        fontSize: 'medium',\n        showTimestamps: true,\n        enableEmojis: true,\n        enableSounds: true\n    });\n    const [aiSettings, setAiSettings] = useState({\n        model: 'gpt-3.5-turbo',\n        temperature: 0.7,\n        maxTokens: 2000\n    });\n    const [accessibility, setAccessibility] = useState({\n        highContrast: false,\n        reducedMotion: false,\n        fontSize: 'medium'\n    });\n\n    useEffect(() => {\n        fetchUserProfile();\n        handleGitHubCallback();\n    }, [location]);\n\n    const handleGitHubCallback = async () => {\n        try {\n            // Check if this is a GitHub OAuth callback\n            const searchParams = new URLSearchParams(location.search);\n            const code = searchParams.get('code');\n            const state = searchParams.get('state');\n            \n            if (code && state) {\n                setLoading(true);\n                showNotification('Processing GitHub authorization...', 'info');\n                \n                // Handle the GitHub OAuth callback\n                const success = await githubService.handleCallback(code, state);\n                \n                if (success) {\n                    showNotification('GitHub account connected successfully!', 'success');\n                    // Clear the URL parameters without refreshing the page\n                    window.history.replaceState({}, document.title, '/dashboard');\n                } else {\n                    showNotification('Failed to connect GitHub account. Please try again.', 'error');\n                }\n                \n                setLoading(false);\n            }\n        } catch (error) {\n            console.error('Error handling GitHub callback:', error);\n            showNotification('Error connecting to GitHub: ' + error.message, 'error');\n            setLoading(false);\n        }\n    };\n    \n    const fetchUserProfile = async () => {\n        try {\n            const { data: { user } } = await supabase.auth.getUser();\n            if (user) {\n                setUser(user);\n                const { data: profile } = await supabase\n                    .from('profiles')\n                    .select('*')\n                    .eq('id', user.id)\n                    .single();\n                \n                if (profile) {\n                    setName(profile.full_name || '');\n                    setTheme(profile.theme || 'light');\n                    if (profile.chat_preferences) setChatPreferences(profile.chat_preferences);\n                    if (profile.ai_settings) setAiSettings(profile.ai_settings);\n                    if (profile.accessibility) setAccessibility(profile.accessibility);\n                }\n            }\n        } catch (error) {\n            console.error('Error fetching profile:', error);\n            showNotification('Error fetching profile', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const updateProfile = async () => {\n        try {\n            setLoading(true);\n            const updates = {\n                id: user.id,\n                full_name: name,\n                theme: theme,\n                chat_preferences: chatPreferences,\n                ai_settings: aiSettings,\n                accessibility: accessibility,\n                updated_at: new Date()\n            };\n\n            const { error } = await supabase\n                .from('profiles')\n                .upsert(updates);\n\n            if (error) throw error;\n            showNotification('Profile updated successfully!', 'success');\n        } catch (error) {\n            console.error('Error updating profile:', error);\n            showNotification('Error updating profile', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleAvatarChange = async (event) => {\n        try {\n            setLoading(true);\n            const file = event.target.files[0];\n            const fileExt = file.name.split('.').pop();\n            const fileName = `${user.id}-${Math.random()}.${fileExt}`;\n\n            const { error: uploadError } = await supabase.storage\n                .from('avatars')\n                .upload(fileName, file);\n\n            if (uploadError) throw uploadError;\n\n            const { error: updateError } = await supabase\n                .from('profiles')\n                .upsert({\n                    id: user.id,\n                    avatar_url: fileName,\n                    updated_at: new Date()\n                });\n\n            if (updateError) throw updateError;\n            setAvatar(URL.createObjectURL(file));\n            showNotification('Avatar updated successfully!', 'success');\n        } catch (error) {\n            console.error('Error uploading avatar:', error);\n            showNotification('Error uploading avatar', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const showNotification = (message, type) => {\n        setNotification({ show: true, message, type });\n        setTimeout(() => setNotification({ show: false, message: '', type: '' }), 3000);\n    };\n\n    if (loading) {\n        return (\n            <div className=\"dashboard-loading\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading profile...</p>\n            </div>\n        );\n    }\n\n    const toggleView = (view) => {\n        setActiveView(view);\n    };\n\n    return (\n        <div className=\"dashboard-container\">\n            <div className=\"dashboard-nav\">\n                <Link to=\"/chat\" className=\"nav-link\">← Back to Chat</Link>\n                <div className=\"view-toggle\">\n                    <button \n                        className={`toggle-button ${activeView === 'github' ? 'active' : ''}`}\n                        onClick={() => toggleView('github')}\n                    >\n                        GitHub Home\n                    </button>\n                    <button \n                        className={`toggle-button ${activeView === 'profile' ? 'active' : ''}`}\n                        onClick={() => toggleView('profile')}\n                    >\n                        Profile Settings\n                    </button>\n                </div>\n            </div>\n            \n            {activeView === 'github' ? (\n                <GitHubHome />\n            ) : (\n                <>\n                    <div className=\"dashboard-header\">\n                        <h1>User Dashboard</h1>\n                        <p>Manage your profile and preferences</p>\n                    </div>\n\n                    <div className=\"dashboard-content\">\n                <div className=\"profile-section\">\n                    <h2>Profile Settings</h2>\n                    <div className=\"avatar-upload\">\n                        <img\n                            src={avatar || 'default-avatar.png'}\n                            alt=\"Profile\"\n                            className=\"profile-avatar\"\n                        />\n                        <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleAvatarChange}\n                            className=\"avatar-input\"\n                            id=\"avatar-upload\"\n                        />\n                        <label htmlFor=\"avatar-upload\" className=\"upload-button\">\n                            Change Avatar\n                        </label>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Display Name</label>\n                        <input\n                            type=\"text\"\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                            placeholder=\"Enter your display name\"\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Theme Preference</label>\n                        <select\n                            value={theme}\n                            onChange={(e) => setTheme(e.target.value)}\n                        >\n                            <option value=\"light\">Light</option>\n                            <option value=\"dark\">Dark</option>\n                            <option value=\"system\">System Default</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"preferences-section\">\n                    <h2>Chat Preferences</h2>\n                    <div className=\"form-group\">\n                        <label>Message Density</label>\n                        <select\n                            value={chatPreferences.messageDensity}\n                            onChange={(e) => setChatPreferences(prev => ({\n                                ...prev,\n                                messageDensity: e.target.value\n                            }))}\n                        >\n                            <option value=\"comfortable\">Comfortable</option>\n                            <option value=\"compact\">Compact</option>\n                            <option value=\"cozy\">Cozy</option>\n                        </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Font Size</label>\n                        <select\n                            value={chatPreferences.fontSize}\n                            onChange={(e) => setChatPreferences(prev => ({\n                                ...prev,\n                                fontSize: e.target.value\n                            }))}\n                        >\n                            <option value=\"small\">Small</option>\n                            <option value=\"medium\">Medium</option>\n                            <option value=\"large\">Large</option>\n                        </select>\n                    </div>\n\n                    <div className=\"form-group checkbox-group\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                checked={chatPreferences.showTimestamps}\n                                onChange={(e) => setChatPreferences(prev => ({\n                                    ...prev,\n                                    showTimestamps: e.target.checked\n                                }))}\n                            />\n                            Show Message Timestamps\n                        </label>\n                    </div>\n\n                    <div className=\"form-group checkbox-group\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                checked={chatPreferences.enableEmojis}\n                                onChange={(e) => setChatPreferences(prev => ({\n                                    ...prev,\n                                    enableEmojis: e.target.checked\n                                }))}\n                            />\n                            Enable Emoji Support\n                        </label>\n                    </div>\n\n                    <div className=\"form-group checkbox-group\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                checked={chatPreferences.enableSounds}\n                                onChange={(e) => setChatPreferences(prev => ({\n                                    ...prev,\n                                    enableSounds: e.target.checked\n                                }))}\n                            />\n                            Enable Sound Effects\n                        </label>\n                    </div>\n                </div>\n\n                <div className=\"ai-settings-section\">\n                    <h2>AI Assistant Settings</h2>\n                    <div className=\"form-group\">\n                        <label>AI Model</label>\n                        <select\n                            value={aiSettings.model}\n                            onChange={(e) => setAiSettings(prev => ({\n                                ...prev,\n                                model: e.target.value\n                            }))}\n                        >\n                            <option value=\"gpt-4\">GPT-4 (Premium)</option>\n                            <option value=\"gpt-3.5-turbo\">GPT-3.5 Turbo</option>\n                            <option value=\"gemini-pro\">Gemini Pro</option>\n                        </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>AI Temperature (Creativity: 0-1)</label>\n                        <input\n                            type=\"range\"\n                            min=\"0\"\n                            max=\"1\"\n                            step=\"0.1\"\n                            value={aiSettings.temperature}\n                            onChange={(e) => setAiSettings(prev => ({\n                                ...prev,\n                                temperature: parseFloat(e.target.value)\n                            }))}\n                        />\n                        <span className=\"range-value\">{aiSettings.temperature}</span>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Max Response Length (Tokens)</label>\n                        <select\n                            value={aiSettings.maxTokens}\n                            onChange={(e) => setAiSettings(prev => ({\n                                ...prev,\n                                maxTokens: parseInt(e.target.value)\n                            }))}\n                        >\n                            <option value=\"1000\">Short (1000)</option>\n                            <option value=\"2000\">Medium (2000)</option>\n                            <option value=\"4000\">Long (4000)</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"accessibility-section\">\n                    <h2>Accessibility</h2>\n                    <div className=\"form-group checkbox-group\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                checked={accessibility.highContrast}\n                                onChange={(e) => setAccessibility(prev => ({\n                                    ...prev,\n                                    highContrast: e.target.checked\n                                }))}\n                            />\n                            High Contrast Mode\n                        </label>\n                    </div>\n\n                    <div className=\"form-group checkbox-group\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                checked={accessibility.reducedMotion}\n                                onChange={(e) => setAccessibility(prev => ({\n                                    ...prev,\n                                    reducedMotion: e.target.checked\n                                }))}\n                            />\n                            Reduced Motion\n                        </label>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Font Size</label>\n                        <select\n                            value={accessibility.fontSize}\n                            onChange={(e) => setAccessibility(prev => ({\n                                ...prev,\n                                fontSize: e.target.value\n                            }))}\n                        >\n                            <option value=\"small\">Small</option>\n                            <option value=\"medium\">Medium</option>\n                            <option value=\"large\">Large</option>\n                            <option value=\"x-large\">Extra Large</option>\n                        </select>\n                    </div>\n                </div>\n\n                        <button\n                            className=\"save-button\"\n                            onClick={updateProfile}\n                            disabled={loading}\n                        >\n                            {loading ? 'Saving...' : 'Save All Changes'}\n                        </button>\n                    </div>\n                </>\n            )}\n\n            {notification.show && (\n                <div className={`notification ${notification.type}`}>\n                    {notification.message}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Dashboard;"],"names":["GitHubHome","isConnected","setIsConnected","useState","loading","setLoading","userData","setUserData","repositories","setRepositories","filteredRepos","setFilteredRepos","searchQuery","setSearchQuery","filter","setFilter","sortBy","setSortBy","notification","setNotification","show","message","type","stats","setStats","totalRepos","totalStars","totalForks","searchMode","setSearchMode","searchResults","setSearchResults","searchOptions","setSearchOptions","language","sort","order","page","per_page","totalSearchResults","setTotalSearchResults","navigate","useNavigate","useEffect","initializeGitHub","length","results","trim","query","toLowerCase","repo","name","includes","description","fork","private","a","b","localeCompare","stargazers_count","Date","updated_at","searchGitHub","async","githubService","searchRepositories","items","total_count","error","console","showNotification","isConfigured","initialized","initialize","getUserData","loadRepositories","repos","getRepositories","reduce","sum","forks_count","handleRepositoryClick","owner","login","setTimeout","_jsxs","className","children","_jsx","src","avatar_url","alt","onClick","placeholder","value","onChange","e","target","onKeyPress","key","disconnect","map","toLocaleDateString","id","disabled","height","viewBox","width","fillRule","d","connectGitHub","authUrl","getAuthUrl","log","window","location","href","urlParams","URLSearchParams","search","code","get","state","redirectUri","GitHubFeatureCards","Dashboard","user","setUser","setName","avatar","setAvatar","theme","setTheme","activeView","setActiveView","useLocation","chatPreferences","setChatPreferences","messageDensity","fontSize","showTimestamps","enableEmojis","enableSounds","aiSettings","setAiSettings","model","temperature","maxTokens","accessibility","setAccessibility","highContrast","reducedMotion","fetchUserProfile","handleGitHubCallback","searchParams","handleCallback","history","replaceState","document","title","data","supabase","auth","getUser","profile","from","select","eq","single","full_name","chat_preferences","ai_settings","toggleView","view","Link","to","_Fragment","accept","file","event","files","fileExt","split","pop","fileName","Math","random","uploadError","storage","upload","updateError","upsert","URL","createObjectURL","htmlFor","prev","checked","min","max","step","parseFloat","parseInt","updates"],"sourceRoot":""}