{"version":3,"file":"static/js/230.37477574.chunk.js","mappings":"gUAuBA,MAAMA,EAAkBC,IACtB,MAAMC,EAAY,CAChB,MAAS,gDACT,GAAM,wCACN,cAAe,gFACf,kBAAmB,2HACnB,OAAU,8DACV,SAAY,oGACZ,WAAc,2FACd,UAAa,+GACb,iBAAkB,oIAClB,WAAc,wHACd,OAAU,+HACV,IAAO,mIACP,GAAI,+DAIAC,EAAmBF,EAAQG,cACjC,IAAK,MAAOC,EAAKC,KAAaC,OAAOC,QAAQN,GAC3C,GAAIG,GAAOF,EAAiBM,SAASJ,GACnC,OAAOC,EAKX,MAAO,+EAA+E,EAsMxF,EAnMmBI,KACjB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACvC,CACEC,GAAI,EACJC,KAAM,6DACNC,OAAQ,KACRC,WAAW,IAAIC,MAAOC,kBAGnBC,EAAYC,IAAiBR,EAAAA,EAAAA,UAAS,KACtCS,EAAWC,IAAgBV,EAAAA,EAAAA,WAAS,IACpCW,EAAQC,IAAaZ,EAAAA,EAAAA,WAAS,GAC/Ba,GAAiBC,EAAAA,EAAAA,QAAO,MAExBC,GAAUC,EAAAA,EAAAA,IAAkB,UAAW,YACvCC,GAAgBD,EAAAA,EAAAA,IAAkB,UAAW,YAC7CE,GAAcF,EAAAA,EAAAA,IAAkB,WAAY,YAC5CG,GAAeH,EAAAA,EAAAA,IAAkB,QAAS,YAC1CI,GAAqBJ,EAAAA,EAAAA,IAAkB,WAAY,YACnDK,GAAmBL,EAAAA,EAAAA,IAAkB,WAAY,YACjDM,GAAuBN,EAAAA,EAAAA,IAAkB,QAAS,UAUxDO,EAAAA,EAAAA,YAAU,KAJaC,MAAO,IAADC,EACL,QAAtBA,EAAAZ,EAAea,eAAO,IAAAD,GAAtBA,EAAwBE,eAAe,CAAEC,SAAU,UAAW,EAI9DJ,EAAgB,GACf,CAAC1B,IAEJ,MAAM+B,EAAoBC,UACxB,IAAKvB,EAAWwB,OAAQ,OAGxB,MAAMC,EAAc,CAClB/B,GAAII,KAAK4B,MACT/B,KAAMK,EACNJ,OAAQ,OACRC,WAAW,IAAIC,MAAOC,eAGxBP,GAAYmC,GAAQ,IAAIA,EAAMF,KAC9BxB,EAAc,IACdE,GAAa,GAGbyB,YAAW,KACT,MAAMC,EAAa,CACjBnC,GAAII,KAAK4B,MAAQ,EACjB/B,KAAMf,EAAe6C,EAAY9B,MACjCC,OAAQ,KACRC,WAAW,IAAIC,MAAOC,eAGxBP,GAAYmC,GAAQ,IAAIA,EAAME,KAC9B1B,GAAa,EAAM,GAClB,IAAK,EAoBV,OACE2B,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,GAAIxB,EACJyB,aAAa,KACbC,YAAY,MACZvB,YAAaA,EACbwB,GAAI,EACJC,SAAS,SAAQC,SAAA,EAEjBP,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACHC,MAAM,SACNC,EAAG,EACHR,GAAItB,EACJ+B,kBAAmBrC,EAAS,MAAQ,IACpCO,YAAaA,EACb+B,eAAe,gBACfC,OAAO,UACPC,QA3EaC,KACjBxC,GAAWD,EAAO,EA0EMiC,SAAA,EAEpBP,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAAAT,SAAA,EACLU,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,KAAK,KACLjB,GAAG,aACHkB,MAAMH,EAAAA,EAAAA,KAACI,EAAAA,EAAW,CAACD,KAAME,EAAAA,IAASC,MAAM,QAAQJ,KAAM,QAExDF,EAAAA,EAAAA,KAACO,EAAAA,EAAO,CAACL,KAAK,KAAIZ,SAAC,kBACnBU,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACC,YAAY,SAASC,SAAS,OAAOC,QAAQ,QAAOrB,SAAC,aAE9DP,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAAAT,SAAA,EACLU,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CACT,aAAW,aACXT,MAAMH,EAAAA,EAAAA,KAACI,EAAAA,EAAW,CAACD,KAAMU,EAAAA,IAASX,KAAM,KACxCA,KAAK,KACLS,QAAQ,QACRd,QAAUiB,IACRA,EAAEC,kBA7CZtE,EAAY,CACV,CACEE,GAAII,KAAK4B,MACT/B,KAAM,uDACNC,OAAQ,KACRC,WAAW,IAAIC,MAAOC,gBAyCL,KAGfgD,EAAAA,EAAAA,KAACI,EAAAA,EAAW,CACVD,KAAM9C,EAAS2D,EAAAA,IAAcC,EAAAA,IAC7Bf,KAAM,YAKZnB,EAAAA,EAAAA,MAACmC,EAAAA,EAAQ,CAACC,GAAI9D,EAAQ+D,gBAAc,EAAA9B,SAAA,EAClCU,EAAAA,EAAAA,KAAChB,EAAAA,EAAG,CACFqC,OAAO,QACPC,UAAU,OACV7B,EAAG,EAAEH,UAELP,EAAAA,EAAAA,MAACwC,EAAAA,EAAM,CAACC,QAAS,EAAGhC,MAAM,UAASF,SAAA,CAChC9C,EAASiF,KAAI3F,IACZkE,EAAAA,EAAAA,KAACT,EAAAA,EAAI,CAEHmC,QAA4B,SAAnB5F,EAAQe,OAAoB,WAAa,aAAayC,UAE/DU,EAAAA,EAAAA,KAAChB,EAAAA,EAAG,CACF2C,KAAK,MACL1C,GAAuB,SAAnBnD,EAAQe,OAAoBiB,EAAqBC,EACrDuC,MAA0B,SAAnBxE,EAAQe,OAAoBmB,OAAuB4D,EAC1DnC,EAAG,EACHP,aAAiC,SAAnBpD,EAAQe,OAClB,gBACA,gBACJ6D,SAAS,KAAIpB,UAEbU,EAAAA,EAAAA,KAAC6B,EAAAA,EAAI,CAAAvC,SAAExD,EAAQc,UAbZd,EAAQa,MAiBhBQ,IACC6C,EAAAA,EAAAA,KAACT,EAAAA,EAAI,CAACmC,QAAQ,aAAYpC,UACxBU,EAAAA,EAAAA,KAAChB,EAAAA,EAAG,CACFC,GAAIlB,EACJ0B,EAAG,EACHP,aAAa,gBAAeI,UAE5BU,EAAAA,EAAAA,KAAC8B,EAAAA,EAAO,CAAC5B,KAAK,YAIpBF,EAAAA,EAAAA,KAAA,OAAK+B,IAAKxE,UAIdwB,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACHE,EAAG,EACHuC,eAAe,MACfpE,YAAaA,EAAY0B,SAAA,EAEzBU,EAAAA,EAAAA,KAACiC,EAAAA,EAAK,CACJC,YAAY,sBACZhC,KAAK,KACLiC,MAAOlF,EACPmF,SAAWtB,GAAM5D,EAAc4D,EAAEuB,OAAOF,OACxCG,WAlHcxB,IACR,UAAVA,EAAE5E,KACJqC,GACF,EAgHQU,GAAIpB,EACJ0E,GAAI,KAENvC,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CACTT,MAAMH,EAAAA,EAAAA,KAACI,EAAAA,EAAW,CAACD,KAAMqC,EAAAA,MACzB/B,YAAY,SACZP,KAAK,KACLuC,YAAaxF,EAAWwB,QAAUtB,EAClC0C,QAAStB,EACTpB,UAAWA,YAIb,C","sources":["components/MiniAIChat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Flex, \r\n  Text, \r\n  Input, \r\n  VStack, \r\n  HStack,\r\n  IconButton,\r\n  useColorModeValue,\r\n  Heading,\r\n  Card,\r\n  CardBody,\r\n  Spinner,\r\n  Collapse,\r\n  Button,\r\n  Avatar,\r\n  Badge\r\n} from '@chakra-ui/react';\r\nimport { FaRobot, FaArrowCircleUp, FaChevronDown, FaChevronUp, FaTrash } from 'react-icons/fa';\r\nimport { IconWrapper } from '../utils/IconWrapper';\r\n\r\n// This would connect to an actual AI service in a real implementation\r\nconst mockAIResponse = (message) => {\r\n  const responses = {\r\n    \"hello\": \"Hello! I'm Echo AI. How can I help you today?\",\r\n    \"hi\": \"Hi there! What can I assist you with?\",\r\n    \"how are you\": \"I'm functioning perfectly! How can I help you with your coding or chat needs?\",\r\n    \"what can you do\": \"I can help with code suggestions, answer questions, provide coding tips, and assist with algorithm challenges. Just ask!\",\r\n    \"thanks\": \"You're welcome! Feel free to ask if you need anything else.\",\r\n    \"leetcode\": \"LeetCode is a great platform for practicing coding problems. Need help with a specific challenge?\",\r\n    \"hackerrank\": \"HackerRank offers coding challenges and certifications. I can help you prepare for them!\",\r\n    \"algorithm\": \"Algorithms are step-by-step procedures for solving problems. Which one are you interested in learning about?\",\r\n    \"data structure\": \"Data structures are ways to organize and store data. Common ones include arrays, linked lists, trees, and graphs. Need specifics?\",\r\n    \"javascript\": \"JavaScript is a versatile programming language primarily used for web development. What do you want to know about it?\",\r\n    \"python\": \"Python is known for its readability and versatility. It's great for beginners and experts alike. How can I help with Python?\",\r\n    \"bug\": \"Debugging can be challenging! Try adding console logs or breakpoints to identify where things go wrong. Want to share your code?\",\r\n    \"\": \"Feel free to ask me anything about coding or chat features!\"\r\n  };\r\n\r\n  // Look for matching keywords\r\n  const lowercaseMessage = message.toLowerCase();\r\n  for (const [key, response] of Object.entries(responses)) {\r\n    if (key && lowercaseMessage.includes(key)) {\r\n      return response;\r\n    }\r\n  }\r\n  \r\n  // Default response\r\n  return \"I'm here to help with coding and chat questions. What would you like to know?\";\r\n};\r\n\r\nconst MiniAIChat = () => {\r\n  const [messages, setMessages] = useState([\r\n    { \r\n      id: 1, \r\n      text: \"Hello! I'm Echo AI. How can I help with your coding today?\", \r\n      sender: 'ai', \r\n      timestamp: new Date().toISOString() \r\n    }\r\n  ]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const messagesEndRef = useRef(null);\r\n  \r\n  const bgColor = useColorModeValue('gray.50', 'gray.800');\r\n  const headerBgColor = useColorModeValue('blue.50', 'gray.700');\r\n  const borderColor = useColorModeValue('blue.200', 'gray.600');\r\n  const inputBgColor = useColorModeValue('white', 'gray.700');\r\n  const userMessageBgColor = useColorModeValue('blue.100', 'blue.600');\r\n  const aiMessageBgColor = useColorModeValue('gray.100', 'gray.700');\r\n  const userMessageTextColor = useColorModeValue('black', 'white');\r\n  \r\n  const toggleOpen = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  \r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n  \r\n  const handleSendMessage = async () => {\r\n    if (!newMessage.trim()) return;\r\n    \r\n    // Add user message\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: newMessage,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setNewMessage('');\r\n    setIsLoading(true);\r\n    \r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const aiResponse = {\r\n        id: Date.now() + 1,\r\n        text: mockAIResponse(userMessage.text),\r\n        sender: 'ai',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      setMessages(prev => [...prev, aiResponse]);\r\n      setIsLoading(false);\r\n    }, 1000);\r\n  };\r\n  \r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSendMessage();\r\n    }\r\n  };\r\n  \r\n  const clearChat = () => {\r\n    setMessages([\r\n      { \r\n        id: Date.now(), \r\n        text: \"Chat cleared. How can I help with your coding today?\", \r\n        sender: 'ai', \r\n        timestamp: new Date().toISOString() \r\n      }\r\n    ]);\r\n  };\r\n  \r\n  return (\r\n    <Box \r\n      bg={bgColor} \r\n      borderRadius=\"md\" \r\n      borderWidth=\"1px\" \r\n      borderColor={borderColor} \r\n      mb={4}\r\n      overflow=\"hidden\"\r\n    >\r\n      <Flex \r\n        align=\"center\" \r\n        p={2} \r\n        bg={headerBgColor}\r\n        borderBottomWidth={isOpen ? \"1px\" : \"0\"} \r\n        borderColor={borderColor}\r\n        justifyContent=\"space-between\"\r\n        cursor=\"pointer\"\r\n        onClick={toggleOpen}\r\n      >\r\n        <HStack>\r\n          <Avatar \r\n            size=\"xs\" \r\n            bg=\"purple.500\" \r\n            icon={<IconWrapper icon={FaRobot} color=\"white\" size={10} />} \r\n          />\r\n          <Heading size=\"xs\">AI Assistant</Heading>\r\n          <Badge colorScheme=\"purple\" fontSize=\"10px\" variant=\"solid\">BETA</Badge>\r\n        </HStack>\r\n        <HStack>\r\n          <IconButton\r\n            aria-label=\"Clear chat\"\r\n            icon={<IconWrapper icon={FaTrash} size={12} />}\r\n            size=\"xs\"\r\n            variant=\"ghost\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              clearChat();\r\n            }}\r\n          />\r\n          <IconWrapper \r\n            icon={isOpen ? FaChevronUp : FaChevronDown} \r\n            size={12} \r\n          />\r\n        </HStack>\r\n      </Flex>\r\n      \r\n      <Collapse in={isOpen} animateOpacity>\r\n        <Box \r\n          height=\"200px\" \r\n          overflowY=\"auto\"\r\n          p={2}\r\n        >\r\n          <VStack spacing={2} align=\"stretch\">\r\n            {messages.map(message => (\r\n              <Flex\r\n                key={message.id}\r\n                justify={message.sender === 'user' ? 'flex-end' : 'flex-start'}\r\n              >\r\n                <Box\r\n                  maxW=\"80%\"\r\n                  bg={message.sender === 'user' ? userMessageBgColor : aiMessageBgColor}\r\n                  color={message.sender === 'user' ? userMessageTextColor : undefined}\r\n                  p={2}\r\n                  borderRadius={message.sender === 'user' \r\n                    ? '8px 8px 0 8px' \r\n                    : '8px 8px 8px 0'}\r\n                  fontSize=\"sm\"\r\n                >\r\n                  <Text>{message.text}</Text>\r\n                </Box>\r\n              </Flex>\r\n            ))}\r\n            {isLoading && (\r\n              <Flex justify=\"flex-start\">\r\n                <Box\r\n                  bg={aiMessageBgColor}\r\n                  p={2}\r\n                  borderRadius=\"8px 8px 8px 0\"\r\n                >\r\n                  <Spinner size=\"sm\" />\r\n                </Box>\r\n              </Flex>\r\n            )}\r\n            <div ref={messagesEndRef} />\r\n          </VStack>\r\n        </Box>\r\n        \r\n        <Flex \r\n          p={2} \r\n          borderTopWidth=\"1px\" \r\n          borderColor={borderColor}\r\n        >\r\n          <Input\r\n            placeholder=\"Ask AI assistant...\"\r\n            size=\"sm\"\r\n            value={newMessage}\r\n            onChange={(e) => setNewMessage(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            bg={inputBgColor}\r\n            mr={1}\r\n          />\r\n          <IconButton\r\n            icon={<IconWrapper icon={FaArrowCircleUp} />}\r\n            colorScheme=\"purple\"\r\n            size=\"sm\"\r\n            isDisabled={!newMessage.trim() || isLoading}\r\n            onClick={handleSendMessage}\r\n            isLoading={isLoading}\r\n          />\r\n        </Flex>\r\n      </Collapse>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MiniAIChat; "],"names":["mockAIResponse","message","responses","lowercaseMessage","toLowerCase","key","response","Object","entries","includes","MiniAIChat","messages","setMessages","useState","id","text","sender","timestamp","Date","toISOString","newMessage","setNewMessage","isLoading","setIsLoading","isOpen","setIsOpen","messagesEndRef","useRef","bgColor","useColorModeValue","headerBgColor","borderColor","inputBgColor","userMessageBgColor","aiMessageBgColor","userMessageTextColor","useEffect","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","async","trim","userMessage","now","prev","setTimeout","aiResponse","_jsxs","Box","bg","borderRadius","borderWidth","mb","overflow","children","Flex","align","p","borderBottomWidth","justifyContent","cursor","onClick","toggleOpen","HStack","_jsx","Avatar","size","icon","IconWrapper","FaRobot","color","Heading","Badge","colorScheme","fontSize","variant","IconButton","FaTrash","e","stopPropagation","FaChevronUp","FaChevronDown","Collapse","in","animateOpacity","height","overflowY","VStack","spacing","map","justify","maxW","undefined","Text","Spinner","ref","borderTopWidth","Input","placeholder","value","onChange","target","onKeyPress","mr","FaArrowCircleUp","isDisabled"],"sourceRoot":""}