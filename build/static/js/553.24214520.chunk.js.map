{"version":3,"file":"static/js/553.24214520.chunk.js","mappings":"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","sources":["components/GitHubHome.js","components/GitHubFeatureCards.js","services/github-service.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { githubService } from '../services/github-service';\nimport { Link, useNavigate } from 'react-router-dom';\nimport GitHubFeatureCards from './GitHubFeatureCards';\nimport './GitHubHome.css';\n\nconst GitHubHome = () => {\n    const [isConnected, setIsConnected] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [userData, setUserData] = useState(null);\n    const [repositories, setRepositories] = useState([]);\n    const [filteredRepos, setFilteredRepos] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [filter, setFilter] = useState('all'); // all, sources, forks, private, public\n    const [sortBy, setSortBy] = useState('updated'); // updated, name, stars\n    const [notification, setNotification] = useState({ show: false, message: '', type: '' });\n    const [stats, setStats] = useState({ totalRepos: 0, totalStars: 0, totalForks: 0 });\n    const [searchMode, setSearchMode] = useState('local'); // local or global\n    const [searchResults, setSearchResults] = useState([]);\n    const [searchOptions, setSearchOptions] = useState({\n        language: '',\n        sort: 'stars',\n        order: 'desc',\n        page: 1,\n        per_page: 30\n    });\n    const [totalSearchResults, setTotalSearchResults] = useState(0);\n    \n    const navigate = useNavigate();\n\n    useEffect(() => {\n        initializeGitHub();\n    }, []);\n\n    // Filter repositories based on search and filters\n    useEffect(() => {\n        if (searchMode === 'global') {\n            // Global search is handled by the searchGitHub function\n            return;\n        }\n\n        if (repositories.length === 0) {\n            setFilteredRepos([]);\n            return;\n        }\n\n        let results = [...repositories];\n        \n        // Apply search query\n        if (searchQuery.trim()) {\n            const query = searchQuery.toLowerCase();\n            results = results.filter(repo => \n                repo.name.toLowerCase().includes(query) ||\n                (repo.description && repo.description.toLowerCase().includes(query))\n            );\n        }\n        \n        // Apply filters\n        if (filter === 'sources') {\n            results = results.filter(repo => !repo.fork);\n        } else if (filter === 'forks') {\n            results = results.filter(repo => repo.fork);\n        } else if (filter === 'private') {\n            results = results.filter(repo => repo.private);\n        } else if (filter === 'public') {\n            results = results.filter(repo => !repo.private);\n        }\n        \n        // Apply sorting\n        results.sort((a, b) => {\n            if (sortBy === 'name') {\n                return a.name.localeCompare(b.name);\n            } else if (sortBy === 'stars') {\n                return b.stargazers_count - a.stargazers_count;\n            } else { // updated\n                return new Date(b.updated_at) - new Date(a.updated_at);\n            }\n        });\n        \n        setFilteredRepos(results);\n    }, [repositories, searchQuery, filter, sortBy, searchMode]);\n\n    const searchGitHub = async () => {\n        if (!searchQuery.trim()) {\n            setSearchResults([]);\n            setTotalSearchResults(0);\n            return;\n        }\n\n        try {\n            setLoading(true);\n            const results = await githubService.searchRepositories(searchQuery, searchOptions);\n            setSearchResults(results.items);\n            setTotalSearchResults(results.total_count);\n        } catch (error) {\n            console.error('Error searching GitHub:', error);\n            showNotification('Failed to search GitHub repositories', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const initializeGitHub = async () => {\n        try {\n            setLoading(true);\n            \n            // Check if GitHub is configured\n            if (!githubService.isConfigured) {\n                showNotification('GitHub integration is not configured. Please set up your GitHub credentials in the .env file.', 'error');\n                setLoading(false);\n                return;\n            }\n            \n            const initialized = await githubService.initialize();\n            setIsConnected(initialized);\n            \n            if (initialized) {\n                const userData = githubService.getUserData();\n                setUserData(userData);\n                await loadRepositories();\n            }\n        } catch (error) {\n            console.error('Error initializing GitHub:', error);\n            showNotification('Failed to initialize GitHub integration', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const loadRepositories = async () => {\n        try {\n            setLoading(true);\n            const repos = await githubService.getRepositories();\n            setRepositories(repos);\n            \n            // Calculate stats\n            const totalStars = repos.reduce((sum, repo) => sum + repo.stargazers_count, 0);\n            const totalForks = repos.reduce((sum, repo) => sum + repo.forks_count, 0);\n            \n            setStats({\n                totalRepos: repos.length,\n                totalStars,\n                totalForks\n            });\n        } catch (error) {\n            console.error('Error loading repositories:', error);\n            showNotification('Failed to load repositories', 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRepositoryClick = (repo) => {\n        navigate(`/github/repository/${repo.owner.login}/${repo.name}`);\n    };\n\n    const connectGitHub = () => {\n        try {\n            const authUrl = githubService.getAuthUrl();\n            console.log('Redirecting to GitHub auth URL:', authUrl);\n            window.location.href = authUrl;\n        } catch (error) {\n            console.error('Error initiating GitHub connection:', error);\n            showNotification('Failed to connect to GitHub: ' + error.message, 'error');\n        }\n    };\n\n    const disconnectGitHub = async () => {\n        try {\n            await githubService.disconnect();\n            setIsConnected(false);\n            setUserData(null);\n            setRepositories([]);\n            setFilteredRepos([]);\n            showNotification('GitHub account disconnected successfully', 'success');\n        } catch (error) {\n            showNotification('Failed to disconnect GitHub account', 'error');\n        }\n    };\n    \n    const showNotification = (message, type) => {\n        setNotification({ show: true, message, type });\n        setTimeout(() => setNotification({ show: false, message: '', type: '' }), 3000);\n    };\n\n    const debugGitHubConnection = async () => {\n        try {\n            setLoading(true);\n            showNotification('Running GitHub connection diagnostics...', 'info');\n            \n            // Check if we have a GitHub code in the URL\n            const urlParams = new URLSearchParams(window.location.search);\n            const code = urlParams.get('code');\n            const state = urlParams.get('state');\n            \n            console.log('GitHub Integration Debug:');\n            console.log('- URL has code param:', !!code);\n            console.log('- URL has state param:', !!state);\n            console.log('- GitHub service configured:', githubService.isConfigured);\n            console.log('- Client ID available:', !!process.env.REACT_APP_GITHUB_CLIENT_ID);\n            console.log('- Redirect URI:', githubService.redirectUri);\n            \n            // Try to initialize without relying on URL params\n            const initialized = await githubService.initialize();\n            console.log('- Service initialized:', initialized);\n            \n            showNotification('Diagnostic data logged to console', 'info');\n        } catch (error) {\n            console.error('Debug error:', error);\n            showNotification('Error during diagnostics: ' + error.message, 'error');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    if (loading && !isConnected) {\n        return (\n            <div className=\"github-home-loading\">\n                <div className=\"loading-spinner\"></div>\n                <p>Loading GitHub integration...</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"github-home-container\">\n            <div className=\"github-home-header\">\n                <h1>GitHub Integration</h1>\n                <p>Connect your GitHub account to collaborate on code</p>\n                \n                {isConnected && userData && (\n                    <div className=\"github-user-summary\">\n                        <img src={userData.avatar_url} alt=\"GitHub Avatar\" className=\"github-avatar\" />\n                        <div>\n                            <h3>{userData.name || userData.login}</h3>\n                            <p>@{userData.login}</p>\n                            \n                            <div className=\"github-stats\">\n                                <div className=\"stat-item\">\n                                    <span className=\"stat-value\">{stats.totalRepos}</span>\n                                    <span className=\"stat-label\">Repositories</span>\n                                </div>\n                                <div className=\"stat-item\">\n                                    <span className=\"stat-value\">{stats.totalStars}</span>\n                                    <span className=\"stat-label\">Total Stars</span>\n                                </div>\n                                <div className=\"stat-item\">\n                                    <span className=\"stat-value\">{stats.totalForks}</span>\n                                    <span className=\"stat-label\">Total Forks</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {!isConnected ? (\n                <div className=\"github-connect-section\">\n                    <div className=\"github-connect-card\">\n                        <div className=\"github-logo\">\n                            <svg height=\"68\" viewBox=\"0 0 16 16\" width=\"68\">\n                                <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path>\n                            </svg>\n                        </div>\n                        <h3>Connect to GitHub</h3>\n                        <p>Link your GitHub account to access your repositories and collaborate on code directly from ECHOLINK.</p>\n                        <button className=\"github-connect-button\" onClick={connectGitHub}>\n                            Connect GitHub Account\n                        </button>\n                        <button className=\"github-debug-button\" onClick={debugGitHubConnection}>\n                            Diagnose Connection Issues\n                        </button>\n                    </div>\n                    \n                    <GitHubFeatureCards />\n                </div>\n            ) : (\n                <div className=\"github-connected-content\">\n                    <div className=\"github-toolbar\">\n                        <div className=\"search-and-filter\">\n                            <div className=\"search-container\">\n                                <div className=\"search-mode-toggle\">\n                                    <button \n                                        className={`mode-button ${searchMode === 'local' ? 'active' : ''}`}\n                                        onClick={() => setSearchMode('local')}\n                                    >\n                                        My Repositories\n                                    </button>\n                                    <button \n                                        className={`mode-button ${searchMode === 'global' ? 'active' : ''}`}\n                                        onClick={() => setSearchMode('global')}\n                                    >\n                                        Search GitHub\n                                    </button>\n                                </div>\n\n                                <div className=\"search-box\">\n                                    <input\n                                        type=\"text\"\n                                        placeholder={searchMode === 'local' ? \"Search your repositories...\" : \"Search all GitHub repositories...\"}\n                                        value={searchQuery}\n                                        onChange={(e) => setSearchQuery(e.target.value)}\n                                        onKeyPress={(e) => {\n                                            if (e.key === 'Enter' && searchMode === 'global') {\n                                                searchGitHub();\n                                            }\n                                        }}\n                                    />\n                                    {searchMode === 'global' && (\n                                        <button onClick={searchGitHub} className=\"search-button\">\n                                            Search\n                                        </button>\n                                    )}\n                                </div>\n\n                                {searchMode === 'global' && (\n                                    <div className=\"search-options\">\n                                        <select\n                                            value={searchOptions.language}\n                                            onChange={(e) => setSearchOptions({ ...searchOptions, language: e.target.value })}\n                                        >\n                                            <option value=\"\">All Languages</option>\n                                            <option value=\"javascript\">JavaScript</option>\n                                            <option value=\"python\">Python</option>\n                                            <option value=\"java\">Java</option>\n                                            <option value=\"typescript\">TypeScript</option>\n                                            <option value=\"cpp\">C++</option>\n                                            <option value=\"csharp\">C#</option>\n                                            <option value=\"php\">PHP</option>\n                                            <option value=\"ruby\">Ruby</option>\n                                            <option value=\"go\">Go</option>\n                                            <option value=\"rust\">Rust</option>\n                                        </select>\n                                        <select\n                                            value={searchOptions.sort}\n                                            onChange={(e) => setSearchOptions({ ...searchOptions, sort: e.target.value })}\n                                        >\n                                            <option value=\"stars\">Stars</option>\n                                            <option value=\"forks\">Forks</option>\n                                            <option value=\"updated\">Updated</option>\n                                        </select>\n                                        <select\n                                            value={searchOptions.order}\n                                            onChange={(e) => setSearchOptions({ ...searchOptions, order: e.target.value })}\n                                        >\n                                            <option value=\"desc\">Descending</option>\n                                            <option value=\"asc\">Ascending</option>\n                                        </select>\n                                    </div>\n                                )}\n\n                                {searchMode === 'local' && (\n                                    <div className=\"filter-container\">\n                                        <select\n                                            value={filter}\n                                            onChange={(e) => setFilter(e.target.value)}\n                                            className=\"repo-filter-select\"\n                                        >\n                                            <option value=\"all\">All Repositories</option>\n                                            <option value=\"sources\">Sources</option>\n                                            <option value=\"forks\">Forks</option>\n                                            <option value=\"private\">Private</option>\n                                            <option value=\"public\">Public</option>\n                                        </select>\n                                        <select\n                                            value={sortBy}\n                                            onChange={(e) => setSortBy(e.target.value)}\n                                            className=\"repo-sort-select\"\n                                        >\n                                            <option value=\"updated\">Last Updated</option>\n                                            <option value=\"name\">Name</option>\n                                            <option value=\"stars\">Stars</option>\n                                        </select>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        \n                        <button className=\"github-disconnect-button\" onClick={disconnectGitHub}>\n                            Disconnect from GitHub\n                        </button>\n                    </div>\n                    \n                    <div className=\"repositories-container\">\n                        {searchMode === 'global' ? (\n                            searchResults.length > 0 ? (\n                                searchResults.map(repo => (\n                                    <div \n                                        key={repo.id} \n                                        className=\"repository-card\"\n                                        onClick={() => handleRepositoryClick(repo)}\n                                    >\n                                        <div className=\"repo-card-header\">\n                                            <div className=\"repo-icon\">{repo.fork ? '🍴' : '📁'}</div>\n                                            <h3 className=\"repo-name\">{repo.name}</h3>\n                                            {repo.private && (\n                                                <span className=\"repo-private-badge\">Private</span>\n                                            )}\n                                        </div>\n                                        <p className=\"repo-description\">\n                                            {repo.description || 'No description provided'}\n                                        </p>\n                                        <div className=\"repo-card-footer\">\n                                            {repo.language && (\n                                                <div className=\"repo-language\">\n                                                    <span className={`language-color ${repo.language.toLowerCase()}`}></span>\n                                                    {repo.language}\n                                                </div>\n                                            )}\n                                            <div className=\"repo-stats\">\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">⭐</span>\n                                                    {repo.stargazers_count}\n                                                </span>\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">🍴</span>\n                                                    {repo.forks_count}\n                                                </span>\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">📅</span>\n                                                    {new Date(repo.updated_at).toLocaleDateString()}\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            ) : searchQuery ? (\n                                <div className=\"no-results-message\">\n                                    No repositories found matching your search\n                                </div>\n                            ) : null\n                        ) : (\n                            filteredRepos.length > 0 ? (\n                                filteredRepos.map(repo => (\n                                    <div \n                                        key={repo.id} \n                                        className=\"repository-card\"\n                                        onClick={() => handleRepositoryClick(repo)}\n                                    >\n                                        <div className=\"repo-card-header\">\n                                            <div className=\"repo-icon\">{repo.fork ? '🍴' : '📁'}</div>\n                                            <h3 className=\"repo-name\">{repo.name}</h3>\n                                            {repo.private && (\n                                                <span className=\"repo-private-badge\">Private</span>\n                                            )}\n                                        </div>\n                                        <p className=\"repo-description\">\n                                            {repo.description || 'No description provided'}\n                                        </p>\n                                        <div className=\"repo-card-footer\">\n                                            {repo.language && (\n                                                <div className=\"repo-language\">\n                                                    <span className={`language-color ${repo.language.toLowerCase()}`}></span>\n                                                    {repo.language}\n                                                </div>\n                                            )}\n                                            <div className=\"repo-stats\">\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">⭐</span>\n                                                    {repo.stargazers_count}\n                                                </span>\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">🍴</span>\n                                                    {repo.forks_count}\n                                                </span>\n                                                <span className=\"repo-stat\">\n                                                    <span className=\"repo-stat-icon\">📅</span>\n                                                    {new Date(repo.updated_at).toLocaleDateString()}\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            ) : repositories.length > 0 ? (\n                                <div className=\"no-results-message\">\n                                    No repositories match your filters\n                                </div>\n                            ) : (\n                                <div className=\"no-repos-message\">\n                                    No repositories found\n                                </div>\n                            )\n                        )}\n                    </div>\n\n                    {searchMode === 'global' && totalSearchResults > searchOptions.per_page && (\n                        <div className=\"pagination\">\n                            <button \n                                onClick={() => setSearchOptions({ ...searchOptions, page: searchOptions.page - 1 })}\n                                disabled={searchOptions.page === 1}\n                            >\n                                Previous\n                            </button>\n                            <span>Page {searchOptions.page}</span>\n                            <button \n                                onClick={() => setSearchOptions({ ...searchOptions, page: searchOptions.page + 1 })}\n                                disabled={searchResults.length < searchOptions.per_page}\n                            >\n                                Next\n                            </button>\n                        </div>\n                    )}\n                </div>\n            )}\n            \n            {notification.show && (\n                <div className={`github-notification ${notification.type}`}>\n                    {notification.message}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default GitHubHome;","import React from 'react';\r\n\r\nconst GitHubFeatureCards = () => {\r\n  return (\r\n    <div className=\"github-features\">\r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">📁</div>\r\n        <h4>Repository Access</h4>\r\n        <p>Browse and search all your GitHub repositories directly from ECHOLINK</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">💻</div>\r\n        <h4>Code Viewing & Editing</h4>\r\n        <p>View and edit code files with syntax highlighting and automatic saving</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">👥</div>\r\n        <h4>Collaborative Editing</h4>\r\n        <p>Edit code files together in real-time with your connected peers</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">📊</div>\r\n        <h4>Repository Analytics</h4>\r\n        <p>See detailed analytics about your repositories including commit activity</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">🔄</div>\r\n        <h4>Commit Changes</h4>\r\n        <p>Make changes to your code and commit them directly to GitHub</p>\r\n      </div>\r\n      \r\n      <div className=\"feature-card\">\r\n        <div className=\"feature-icon\">🔍</div>\r\n        <h4>Search & Filter</h4>\r\n        <p>Find repositories and files quickly with powerful search capabilities</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GitHubFeatureCards;","// GitHub API integration service\nimport { supabase } from './supabase-service';\n\nclass GitHubService {\n    constructor() {\n        this.clientId = process.env.REACT_APP_GITHUB_CLIENT_ID || '';\n        this.redirectUri = `${window.location.origin}/dashboard`;\n        console.log('GitHub redirect URI:', this.redirectUri);\n        this.scope = 'repo user';\n        this.accessToken = null;\n        this.userData = null;\n        this.isConfigured = !!this.clientId;\n    }\n\n    /**\n     * Initialize the GitHub service with an existing token if available\n     */\n    async initialize() {\n        try {\n            // Check if GitHub integration is properly configured\n            if (!this.isConfigured) {\n                console.error('GitHub integration is not configured. Please set REACT_APP_GITHUB_CLIENT_ID in your .env file.');\n                return false;\n            }\n            \n            // Check if we have a GitHub code in the URL (callback from GitHub OAuth)\n            const urlParams = new URLSearchParams(window.location.search);\n            const code = urlParams.get('code');\n            const state = urlParams.get('state');\n            \n            if (code && state) {\n                console.log('Detected GitHub OAuth callback in URL');\n                // Handle the OAuth callback\n                const success = await this.handleCallback(code, state);\n                \n                if (success) {\n                    // Remove the code and state from URL to prevent repeated auth attempts\n                    const newUrl = window.location.pathname;\n                    window.history.replaceState({}, document.title, newUrl);\n                    return true;\n                }\n                return false;\n            }\n            \n            // Check if we have a stored token in localStorage or Supabase\n            const { data: { user } } = await supabase.auth.getUser();\n            if (user) {\n                const { data: profile } = await supabase\n                    .from('profiles')\n                    .select('github_access_token')\n                    .eq('id', user.id)\n                    .single();\n                \n                if (profile?.github_access_token) {\n                    this.accessToken = profile.github_access_token;\n                    await this.fetchUserData();\n                    return true;\n                }\n            }\n            return false;\n        } catch (error) {\n            console.error('Error initializing GitHub service:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Get the OAuth authorization URL\n     */\n    getAuthUrl() {\n        if (!this.isConfigured) {\n            console.error('GitHub integration is not configured. Please set REACT_APP_GITHUB_CLIENT_ID in your .env file.');\n            return '#';\n        }\n        \n        const params = new URLSearchParams({\n            client_id: this.clientId,\n            redirect_uri: this.redirectUri,\n            scope: this.scope,\n            state: this.generateRandomState(),\n        });\n\n        return `https://github.com/login/oauth/authorize?${params.toString()}`;\n    }\n    \n    /**\n     * Get commit activity for a repository\n     */\n    async getCommitActivity(owner, repo) {\n        try {\n            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/stats/commit_activity`, {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                },\n            });\n            \n            if (!response.ok) {\n                throw new Error('Failed to fetch commit activity');\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching commit activity:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get contributor statistics for a repository\n     */\n    async getContributorStats(owner, repo) {\n        try {\n            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/stats/contributors`, {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                },\n            });\n            \n            if (!response.ok) {\n                throw new Error('Failed to fetch contributor stats');\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching contributor stats:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Generate a random state string for OAuth security\n     */\n    generateRandomState() {\n        const state = Math.random().toString(36).substring(2, 15);\n        localStorage.setItem('github_oauth_state', state);\n        return state;\n    }\n\n    /**\n     * Handle the OAuth callback\n     */\n    async handleCallback(code, state) {\n        try {\n            // Verify state to prevent CSRF attacks\n            const savedState = localStorage.getItem('github_oauth_state');\n            if (state !== savedState) {\n                throw new Error('Invalid state parameter');\n            }\n\n            // Exchange code for access token using a backend proxy\n            // Always use the server port 5000 regardless of where the frontend is running\n            const hostname = window.location.hostname;\n            const serverUrl = `http://${hostname}:5000`;\n            console.log('Using server URL for GitHub OAuth:', serverUrl);\n            \n            const response = await fetch(`${serverUrl}/api/github/oauth/token`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ code }),\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Token exchange response:', errorText);\n                throw new Error('Failed to exchange code for token: ' + errorText);\n            }\n\n            const data = await response.json();\n            this.accessToken = data.access_token;\n\n            // Save token to user profile\n            await this.saveTokenToProfile();\n\n            // Fetch user data\n            await this.fetchUserData();\n\n            return true;\n        } catch (error) {\n            console.error('GitHub OAuth error:', error);\n            return false;\n        } finally {\n            localStorage.removeItem('github_oauth_state');\n        }\n    }\n\n    /**\n     * Save the GitHub access token to the user's profile\n     */\n    async saveTokenToProfile() {\n        try {\n            const { data: { user } } = await supabase.auth.getUser();\n            if (user && this.accessToken) {\n                // First save to profiles table for backward compatibility\n                await supabase\n                    .from('profiles')\n                    .upsert({\n                        id: user.id,\n                        github_access_token: this.accessToken,\n                        updated_at: new Date()\n                    });\n                \n                // Then save to the dedicated github_info table if we have user data\n                if (this.userData) {\n                    const { saveGitHubInfo } = await import('./supabase-service');\n                    await saveGitHubInfo(user.id, {\n                        accessToken: this.accessToken,\n                        username: this.userData.login,\n                        avatarUrl: this.userData.avatar_url,\n                        name: this.userData.name,\n                        email: this.userData.email\n                    });\n                }\n            }\n        } catch (error) {\n            console.error('Error saving GitHub token:', error);\n        }\n    }\n\n    /**\n     * Fetch the user's GitHub data\n     */\n    async fetchUserData() {\n        if (!this.accessToken) return null;\n\n        try {\n            const response = await fetch('https://api.github.com/user', {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch GitHub user data');\n            }\n\n            this.userData = await response.json();\n            return this.userData;\n        } catch (error) {\n            console.error('Error fetching GitHub user data:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Get user repositories\n     */\n    async getRepositories() {\n        if (!this.accessToken) return [];\n\n        try {\n            const response = await fetch('https://api.github.com/user/repos?sort=updated', {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch repositories');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching repositories:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Get repository content\n     */\n    async getRepositoryContent(owner, repo, path = '') {\n        if (!this.accessToken) return null;\n\n        try {\n            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`, {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch repository content');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching repository content:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Get file content\n     */\n    async getFileContent(url) {\n        if (!this.accessToken) return null;\n\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                    Accept: 'application/vnd.github.v3.raw',\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch file content');\n            }\n\n            return await response.text();\n        } catch (error) {\n            console.error('Error fetching file content:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Update file content\n     */\n    async updateFile(owner, repo, path, content, message, sha) {\n        if (!this.accessToken) return false;\n\n        try {\n            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`, {\n                method: 'PUT',\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    message,\n                    content: btoa(content),\n                    sha,\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to update file');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error updating file:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Disconnect GitHub account\n     */\n    async disconnect() {\n        try {\n            this.accessToken = null;\n            this.userData = null;\n\n            const { data: { user } } = await supabase.auth.getUser();\n            if (user) {\n                await supabase\n                    .from('profiles')\n                    .upsert({\n                        id: user.id,\n                        github_access_token: null,\n                        updated_at: new Date()\n                    });\n            }\n\n            return true;\n        } catch (error) {\n            console.error('Error disconnecting GitHub account:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Check if user is connected to GitHub\n     */\n    isConnected() {\n        return !!this.accessToken && !!this.userData;\n    }\n\n    /**\n     * Get user data\n     */\n    getUserData() {\n        return this.userData;\n    }\n\n    /**\n     * Get pull requests for a repository\n     */\n    async getPullRequests(owner, repo) {\n        if (!this.accessToken) return [];\n\n        try {\n            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/pulls?state=all`, {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch pull requests');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching pull requests:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Get commits for a repository\n     */\n    async getCommits(owner, repo) {\n        if (!this.accessToken) return [];\n\n        try {\n            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/commits`, {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch commits');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching commits:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Get user's projects\n     */\n    async getProjects() {\n        if (!this.accessToken) return [];\n\n        try {\n            const response = await fetch('https://api.github.com/user/projects', {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                    Accept: 'application/vnd.github.inertia-preview+json' // Projects API requires this preview header\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch projects');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching projects:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Search GitHub repositories\n     * @param {string} query - Search query\n     * @param {Object} options - Search options\n     * @param {string} options.language - Filter by programming language\n     * @param {string} options.sort - Sort by: stars, forks, updated\n     * @param {string} options.order - Order: asc or desc\n     * @param {number} options.per_page - Results per page (max 100)\n     * @param {number} options.page - Page number\n     */\n    async searchRepositories(query, options = {}) {\n        if (!this.accessToken) return { items: [], total_count: 0 };\n\n        try {\n            const params = new URLSearchParams({\n                q: query,\n                sort: options.sort || 'stars',\n                order: options.order || 'desc',\n                per_page: options.per_page || 30,\n                page: options.page || 1\n            });\n\n            if (options.language) {\n                params.append('q', `language:${options.language}`);\n            }\n\n            const response = await fetch(`https://api.github.com/search/repositories?${params.toString()}`, {\n                headers: {\n                    Authorization: `token ${this.accessToken}`,\n                    Accept: 'application/vnd.github.v3+json'\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to search repositories');\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Error searching repositories:', error);\n            return { items: [], total_count: 0 };\n        }\n    }\n}\n\nexport const githubService = new GitHubService();"],"names":["GitHubHome","isConnected","setIsConnected","useState","loading","setLoading","userData","setUserData","repositories","setRepositories","filteredRepos","setFilteredRepos","searchQuery","setSearchQuery","filter","setFilter","sortBy","setSortBy","notification","setNotification","show","message","type","stats","setStats","totalRepos","totalStars","totalForks","searchMode","setSearchMode","searchResults","setSearchResults","searchOptions","setSearchOptions","language","sort","order","page","per_page","totalSearchResults","setTotalSearchResults","navigate","useNavigate","useEffect","initializeGitHub","length","results","trim","query","toLowerCase","repo","name","includes","description","fork","private","a","b","localeCompare","stargazers_count","Date","updated_at","searchGitHub","async","githubService","searchRepositories","items","total_count","error","console","showNotification","isConfigured","initialized","initialize","getUserData","loadRepositories","repos","getRepositories","reduce","sum","forks_count","handleRepositoryClick","owner","login","setTimeout","_jsxs","className","children","_jsx","src","avatar_url","alt","onClick","placeholder","value","onChange","e","target","onKeyPress","key","disconnect","map","toLocaleDateString","id","disabled","height","viewBox","width","fillRule","d","connectGitHub","authUrl","getAuthUrl","log","window","location","href","urlParams","URLSearchParams","search","code","get","state","redirectUri","GitHubFeatureCards","constructor","this","clientId","process","origin","scope","accessToken","handleCallback","newUrl","pathname","history","replaceState","document","title","data","user","supabase","auth","getUser","profile","from","select","eq","single","github_access_token","fetchUserData","client_id","redirect_uri","generateRandomState","toString","getCommitActivity","response","fetch","headers","Authorization","ok","Error","json","getContributorStats","Math","random","substring","localStorage","setItem","getItem","serverUrl","hostname","method","body","JSON","stringify","errorText","text","access_token","saveTokenToProfile","removeItem","upsert","saveGitHubInfo","username","avatarUrl","email","getRepositoryContent","path","arguments","undefined","getFileContent","url","Accept","updateFile","content","sha","btoa","getPullRequests","getCommits","getProjects","options","params","q","append"],"sourceRoot":""}