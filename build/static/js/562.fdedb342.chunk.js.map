{"version":3,"file":"static/js/562.fdedb342.chunk.js","mappings":"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","sources":["components/AISettings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport aiService from '../services/ai-service';\r\nimport { saveAISettings } from '../services/supabase-service';\r\nimport './AISettings.css';\r\n\r\nconst AISettings = ({ onClose, addNotification, currentUser }) => {\r\n    const [provider, setProvider] = useState('openai');\r\n    const [apiKey, setApiKey] = useState('');\r\n    const [selectedModel, setSelectedModel] = useState('');\r\n    const [availableModels, setAvailableModels] = useState([]);\r\n    const [temperature, setTemperature] = useState(0.7);\r\n    const [maxTokens, setMaxTokens] = useState(2048);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Load saved API key from localStorage\r\n        const savedApiKey = localStorage.getItem(`${provider}_api_key`);\r\n        if (savedApiKey) {\r\n            setApiKey(savedApiKey);\r\n        }\r\n    }, [provider]);\r\n\r\n    const providers = [\r\n        { \r\n            id: 'openai', \r\n            name: 'OpenAI', \r\n            models: [\r\n                'gpt-4-1106-preview',\r\n                'gpt-4',\r\n                'gpt-4-32k',\r\n                'gpt-3.5-turbo-1106',\r\n                'gpt-3.5-turbo',\r\n                'gpt-3.5-turbo-16k',\r\n                'text-davinci-003',\r\n                'text-davinci-002'\r\n            ]\r\n        },\r\n        { \r\n            id: 'gemini', \r\n            name: 'Google Gemini', \r\n            models: [\r\n                'gemini-pro',\r\n                'gemini-pro-vision',\r\n                'gemini-ultra'\r\n            ]\r\n        },\r\n        { \r\n            id: 'ollama', \r\n            name: 'Ollama (Local)', \r\n            models: [] \r\n        }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const updateModels = async () => {\r\n            if (provider === 'ollama') {\r\n                await fetchOllamaModels();\r\n            } else {\r\n                const selectedProvider = providers.find(p => p.id === provider);\r\n                const providerModels = selectedProvider ? selectedProvider.models : [];\r\n                setAvailableModels(providerModels);\r\n                if (providerModels.length > 0) {\r\n                    setSelectedModel(providerModels[0]);\r\n                }\r\n            }\r\n        };\r\n        updateModels();\r\n    }, [provider]);\r\n\r\n    const fetchOllamaModels = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:11434/api/tags');\r\n            if (!response.ok) throw new Error('Failed to fetch Ollama models');\r\n            const data = await response.json();\r\n            const models = data.models || [];\r\n            setAvailableModels(models.map(model => model.name));\r\n        } catch (error) {\r\n            setError('Could not connect to Ollama. Make sure it\\'s running locally.');\r\n            setAvailableModels([]);\r\n        }\r\n    };\r\n\r\n    const handleProviderChange = (e) => {\r\n        const newProvider = e.target.value;\r\n        setProvider(newProvider);\r\n        const savedApiKey = localStorage.getItem(`${newProvider}_api_key`);\r\n        setApiKey(savedApiKey || '');\r\n        setSelectedModel('');\r\n        setError('');\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsLoading(true);\r\n        setError('');\r\n\r\n        try {\r\n            await aiService.initialize(provider === 'ollama' ? 'ollama' : apiKey);\r\n            if (selectedModel) {\r\n                aiService.setModel(selectedModel);\r\n            }\r\n            \r\n            // Save to localStorage as a fallback\r\n            if (provider !== 'ollama' && apiKey) {\r\n                localStorage.setItem(`${provider}_api_key`, apiKey);\r\n            }\r\n            \r\n            // Save to Supabase if user is logged in\r\n            if (currentUser?.id) {\r\n                const aiSettings = {\r\n                    provider,\r\n                    apiKey: provider === 'ollama' ? 'ollama' : apiKey,\r\n                    model: selectedModel,\r\n                    temperature,\r\n                    maxTokens\r\n                };\r\n                \r\n                await saveAISettings(currentUser.id, aiSettings);\r\n            }\r\n            \r\n            addNotification('AI settings updated successfully', 'success');\r\n            onClose();\r\n        } catch (error) {\r\n            setError(error.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"ai-settings-container\">\r\n            <div className=\"ai-settings-header\">\r\n                <h2>AI Provider Settings</h2>\r\n                <button className=\"close-button\" onClick={onClose}>Ã—</button>\r\n            </div>\r\n            <form onSubmit={handleSubmit} className=\"ai-settings-form\">\r\n                <div className=\"form-group\">\r\n                    <label>Select Provider:</label>\r\n                    <select \r\n                        value={provider} \r\n                        onChange={handleProviderChange}\r\n                        className=\"provider-select\"\r\n                    >\r\n                        {providers.map(p => (\r\n                            <option key={p.id} value={p.id}>{p.name}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                {provider !== 'ollama' && (\r\n                    <div className=\"form-group\">\r\n                        <label>API Key:</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            value={apiKey}\r\n                            onChange={(e) => setApiKey(e.target.value)}\r\n                            placeholder={`Enter your ${provider === 'openai' ? 'OpenAI' : 'Google'} API key`}\r\n                            className=\"api-key-input\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Select Model:</label>\r\n                    {provider === 'ollama' && availableModels.length === 0 ? (\r\n                        <div className=\"no-models-message\">No models found locally. Please install Ollama models first.</div>\r\n                    ) : (\r\n                        <select\r\n                            value={selectedModel}\r\n                            onChange={(e) => setSelectedModel(e.target.value)}\r\n                            className=\"model-select\"\r\n                            required\r\n                        >\r\n                            <option value=\"\">Choose a model</option>\r\n                            {availableModels.map(model => (\r\n                                <option key={model} value={model}>{model}</option>\r\n                            ))}\r\n                        </select>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Temperature: {temperature}</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"0\"\r\n                        max=\"1\"\r\n                        step=\"0.1\"\r\n                        value={temperature}\r\n                        onChange={(e) => setTemperature(parseFloat(e.target.value))}\r\n                        className=\"slider\"\r\n                    />\r\n                    <div className=\"slider-labels\">\r\n                        <span>More Precise</span>\r\n                        <span>More Creative</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Max Tokens: {maxTokens}</label>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"256\"\r\n                        max=\"8192\"\r\n                        step=\"256\"\r\n                        value={maxTokens}\r\n                        onChange={(e) => setMaxTokens(parseInt(e.target.value))}\r\n                        className=\"slider\"\r\n                    />\r\n                </div>\r\n\r\n                {error && <div className=\"error-message\">{error}</div>}\r\n\r\n                <button \r\n                    type=\"submit\" \r\n                    className=\"save-button\" \r\n                    disabled={isLoading || (!apiKey && provider !== 'ollama') || !selectedModel}\r\n                >\r\n                    {isLoading ? 'Connecting...' : 'Save Settings'}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AISettings;"],"names":["_ref","onClose","addNotification","currentUser","provider","setProvider","useState","apiKey","setApiKey","selectedModel","setSelectedModel","availableModels","setAvailableModels","temperature","setTemperature","maxTokens","setMaxTokens","isLoading","setIsLoading","error","setError","useEffect","savedApiKey","localStorage","getItem","providers","id","name","models","async","fetchOllamaModels","selectedProvider","find","p","providerModels","length","updateModels","response","fetch","ok","Error","json","map","model","_jsxs","className","children","_jsx","onClick","onSubmit","e","preventDefault","aiService","initialize","setModel","setItem","aiSettings","saveAISettings","message","value","onChange","newProvider","target","type","placeholder","required","min","max","step","parseFloat","parseInt","disabled"],"sourceRoot":""}