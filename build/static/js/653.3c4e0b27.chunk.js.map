{"version":3,"file":"static/js/653.3c4e0b27.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/react/dist/esm/progress/progress.utils.mjs","../node_modules/@chakra-ui/react/dist/esm/progress/progress.mjs","components/VoiceMessageRecorder.js"],"sourcesContent":["'use client';\nimport { keyframes } from '@emotion/react';\n\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nconst spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nconst rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nconst progress = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" }\n});\nconst stripe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" }\n});\nfunction getProgressProps(options) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n    role = \"progressbar\"\n  } = options;\n  const percent = valueToPercent(value, min, max);\n  const getAriaValueText = () => {\n    if (value == null)\n      return void 0;\n    return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n  };\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : void 0,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? void 0 : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role\n    },\n    percent,\n    value\n  };\n}\n\nexport { getProgressProps, progress, rotate, spin, stripe };\n","'use client';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { createContext } from '@chakra-ui/utils';\nimport { getProgressProps, progress, stripe } from './progress.utils.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\n\nconst [ProgressStylesProvider, useProgressStyles] = createContext({\n  name: `ProgressStylesContext`,\n  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Progress />\" `\n});\nconst ProgressFilledTrack = forwardRef(\n  (props, ref) => {\n    const { min, max, value, isIndeterminate, role, ...rest } = props;\n    const progress2 = getProgressProps({\n      value,\n      min,\n      max,\n      isIndeterminate,\n      role\n    });\n    const styles = useProgressStyles();\n    const trackStyles = {\n      height: \"100%\",\n      ...styles.filledTrack\n    };\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ref,\n        style: { width: `${progress2.percent}%`, ...rest.style },\n        ...progress2.bind,\n        ...rest,\n        __css: trackStyles\n      }\n    );\n  }\n);\nconst Progress = forwardRef((props, ref) => {\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-valuetext\": ariaValueText,\n    title,\n    role,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Progress\", props);\n  const borderRadius = propBorderRadius ?? styles.track?.borderRadius;\n  const stripeAnimation = { animation: `${stripe} 1s linear infinite` };\n  const shouldAddStripe = !isIndeterminate && hasStripe;\n  const shouldAnimateStripe = shouldAddStripe && isAnimated;\n  const css = {\n    ...shouldAnimateStripe && stripeAnimation,\n    ...isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`\n    }\n  };\n  const trackStyles = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track\n  };\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      borderRadius,\n      __css: trackStyles,\n      ...rest,\n      children: /* @__PURE__ */ jsxs(ProgressStylesProvider, { value: styles, children: [\n        /* @__PURE__ */ jsx(\n          ProgressFilledTrack,\n          {\n            \"aria-label\": ariaLabel,\n            \"aria-labelledby\": ariaLabelledBy,\n            \"aria-valuetext\": ariaValueText,\n            min,\n            max,\n            value,\n            isIndeterminate,\n            css,\n            borderRadius,\n            title,\n            role\n          }\n        ),\n        children\n      ] })\n    }\n  );\n});\nProgress.displayName = \"Progress\";\n\nexport { Progress, useProgressStyles };\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Text,\r\n  IconButton,\r\n  useColorModeValue,\r\n  Heading,\r\n  Collapse,\r\n  HStack,\r\n  Progress,\r\n  Tooltip,\r\n  Badge,\r\n  VStack\r\n} from '@chakra-ui/react';\r\nimport { \r\n  FaMicrophone, \r\n  FaStop, \r\n  FaTrash, \r\n  FaPlay, \r\n  FaPause, \r\n  FaChevronDown, \r\n  FaChevronUp, \r\n  FaPaperPlane,\r\n  FaVolumeUp\r\n} from 'react-icons/fa';\r\nimport { IconWrapper } from '../utils/IconWrapper';\r\n\r\nconst VoiceMessageRecorder = ({ onSendVoiceMessage }) => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [recordingTime, setRecordingTime] = useState(0);\r\n  const [audioBlob, setAudioBlob] = useState(null);\r\n  const [audioUrl, setAudioUrl] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [recordingHistory, setRecordingHistory] = useState([]);\r\n  \r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n  const timerRef = useRef(null);\r\n  const audioRef = useRef(new Audio());\r\n  \r\n  const bgColor = useColorModeValue('gray.50', 'gray.800');\r\n  const headerBgColor = useColorModeValue('blue.50', 'gray.700');\r\n  const borderColor = useColorModeValue('blue.200', 'gray.600');\r\n  const controlsBgColor = useColorModeValue('white', 'gray.700');\r\n  \r\n  const toggleOpen = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  \r\n  const formatTime = (seconds) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n  \r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      \r\n      const mediaRecorder = new MediaRecorder(stream);\r\n      mediaRecorderRef.current = mediaRecorder;\r\n      audioChunksRef.current = [];\r\n      \r\n      mediaRecorder.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          audioChunksRef.current.push(event.data);\r\n        }\r\n      };\r\n      \r\n      mediaRecorder.onstop = () => {\r\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\r\n        const audioUrl = URL.createObjectURL(audioBlob);\r\n        \r\n        setAudioBlob(audioBlob);\r\n        setAudioUrl(audioUrl);\r\n        \r\n        // Stop all tracks\r\n        stream.getTracks().forEach(track => track.stop());\r\n      };\r\n      \r\n      mediaRecorder.start();\r\n      setIsRecording(true);\r\n      setRecordingTime(0);\r\n      \r\n      // Start timer\r\n      timerRef.current = setInterval(() => {\r\n        setRecordingTime(prev => prev + 1);\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      console.error('Error accessing microphone:', error);\r\n      alert('Could not access microphone. Please check permissions.');\r\n    }\r\n  };\r\n  \r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current && isRecording) {\r\n      mediaRecorderRef.current.stop();\r\n      setIsRecording(false);\r\n      \r\n      // Clear timer\r\n      clearInterval(timerRef.current);\r\n    }\r\n  };\r\n  \r\n  const playRecording = () => {\r\n    if (audioUrl) {\r\n      audioRef.current.src = audioUrl;\r\n      audioRef.current.play();\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n  \r\n  const pausePlayback = () => {\r\n    if (audioRef.current) {\r\n      audioRef.current.pause();\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n  \r\n  const deleteRecording = () => {\r\n    if (audioUrl) {\r\n      URL.revokeObjectURL(audioUrl);\r\n    }\r\n    \r\n    setAudioBlob(null);\r\n    setAudioUrl(null);\r\n    setRecordingTime(0);\r\n    \r\n    if (audioRef.current) {\r\n      audioRef.current.pause();\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n  \r\n  const sendVoiceMessage = () => {\r\n    if (audioBlob && onSendVoiceMessage) {\r\n      // Create a recording history item\r\n      const historyItem = {\r\n        id: Date.now(),\r\n        duration: recordingTime,\r\n        timestamp: new Date().toISOString(),\r\n        blob: audioBlob,\r\n        url: audioUrl\r\n      };\r\n      \r\n      setRecordingHistory(prev => [historyItem, ...prev].slice(0, 5));\r\n      \r\n      // Send to parent component\r\n      onSendVoiceMessage(audioBlob, recordingTime);\r\n      \r\n      // Clear current recording\r\n      deleteRecording();\r\n    }\r\n  };\r\n  \r\n  const playHistoryItem = (url) => {\r\n    // Stop current playback if any\r\n    pausePlayback();\r\n    \r\n    // Play the selected recording\r\n    audioRef.current.src = url;\r\n    audioRef.current.play();\r\n    setIsPlaying(true);\r\n  };\r\n  \r\n  // Handle audio playback ended\r\n  useEffect(() => {\r\n    const handleEnded = () => {\r\n      setIsPlaying(false);\r\n    };\r\n    \r\n    audioRef.current.addEventListener('ended', handleEnded);\r\n    \r\n    return () => {\r\n      audioRef.current.removeEventListener('ended', handleEnded);\r\n    };\r\n  }, []);\r\n  \r\n  // Clean up on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n      \r\n      if (audioUrl) {\r\n        URL.revokeObjectURL(audioUrl);\r\n      }\r\n    };\r\n  }, [audioUrl]);\r\n  \r\n  return (\r\n    <Box\r\n      bg={bgColor}\r\n      borderRadius=\"md\"\r\n      borderWidth=\"1px\"\r\n      borderColor={borderColor}\r\n      mb={4}\r\n      overflow=\"hidden\"\r\n    >\r\n      <Flex\r\n        align=\"center\"\r\n        p={2}\r\n        bg={headerBgColor}\r\n        borderBottomWidth={isOpen ? \"1px\" : \"0\"}\r\n        borderColor={borderColor}\r\n        justifyContent=\"space-between\"\r\n        cursor=\"pointer\"\r\n        onClick={toggleOpen}\r\n      >\r\n        <HStack>\r\n          <IconWrapper icon={FaMicrophone} size={14} mr={2} />\r\n          <Heading size=\"xs\">Voice Messages</Heading>\r\n          {isRecording && (\r\n            <Badge colorScheme=\"red\" variant=\"solid\" fontSize=\"10px\" animation=\"pulse 1.5s infinite\">\r\n              REC\r\n            </Badge>\r\n          )}\r\n        </HStack>\r\n        <IconWrapper\r\n          icon={isOpen ? FaChevronUp : FaChevronDown}\r\n          size={12}\r\n        />\r\n      </Flex>\r\n      \r\n      <Collapse in={isOpen} animateOpacity>\r\n        <Box p={3}>\r\n          {/* Recording controls */}\r\n          <Box\r\n            bg={controlsBgColor}\r\n            p={2}\r\n            borderRadius=\"md\"\r\n            borderWidth=\"1px\"\r\n            borderColor={borderColor}\r\n            mb={2}\r\n          >\r\n            <Flex justify=\"space-between\" align=\"center\" mb={2}>\r\n              <Text fontSize=\"xs\" fontWeight=\"bold\">\r\n                {isRecording ? 'Recording...' : audioUrl ? 'Recording ready' : 'Ready to record'}\r\n              </Text>\r\n              <Text fontSize=\"xs\" fontWeight=\"bold\" color={isRecording ? 'red.500' : 'gray.500'}>\r\n                {formatTime(recordingTime)}\r\n              </Text>\r\n            </Flex>\r\n            \r\n            {isRecording && (\r\n              <Progress \r\n                size=\"xs\" \r\n                colorScheme=\"red\" \r\n                isIndeterminate \r\n                mb={2}\r\n              />\r\n            )}\r\n            \r\n            <Flex justify=\"center\" gap={2}>\r\n              {!isRecording && !audioUrl && (\r\n                <Tooltip label=\"Start recording\">\r\n                  <IconButton\r\n                    icon={<IconWrapper icon={FaMicrophone} />}\r\n                    colorScheme=\"red\"\r\n                    size=\"sm\"\r\n                    isRound\r\n                    onClick={startRecording}\r\n                    aria-label=\"Start recording\"\r\n                  />\r\n                </Tooltip>\r\n              )}\r\n              \r\n              {isRecording && (\r\n                <Tooltip label=\"Stop recording\">\r\n                  <IconButton\r\n                    icon={<IconWrapper icon={FaStop} />}\r\n                    colorScheme=\"red\"\r\n                    size=\"sm\"\r\n                    isRound\r\n                    onClick={stopRecording}\r\n                    aria-label=\"Stop recording\"\r\n                  />\r\n                </Tooltip>\r\n              )}\r\n              \r\n              {audioUrl && !isPlaying && (\r\n                <Tooltip label=\"Play recording\">\r\n                  <IconButton\r\n                    icon={<IconWrapper icon={FaPlay} />}\r\n                    colorScheme=\"blue\"\r\n                    size=\"sm\"\r\n                    isRound\r\n                    onClick={playRecording}\r\n                    aria-label=\"Play recording\"\r\n                  />\r\n                </Tooltip>\r\n              )}\r\n              \r\n              {audioUrl && isPlaying && (\r\n                <Tooltip label=\"Pause playback\">\r\n                  <IconButton\r\n                    icon={<IconWrapper icon={FaPause} />}\r\n                    colorScheme=\"blue\"\r\n                    size=\"sm\"\r\n                    isRound\r\n                    onClick={pausePlayback}\r\n                    aria-label=\"Pause playback\"\r\n                  />\r\n                </Tooltip>\r\n              )}\r\n              \r\n              {audioUrl && (\r\n                <>\r\n                  <Tooltip label=\"Delete recording\">\r\n                    <IconButton\r\n                      icon={<IconWrapper icon={FaTrash} />}\r\n                      colorScheme=\"gray\"\r\n                      size=\"sm\"\r\n                      isRound\r\n                      onClick={deleteRecording}\r\n                      aria-label=\"Delete recording\"\r\n                    />\r\n                  </Tooltip>\r\n                  \r\n                  <Tooltip label=\"Send voice message\">\r\n                    <IconButton\r\n                      icon={<IconWrapper icon={FaPaperPlane} />}\r\n                      colorScheme=\"green\"\r\n                      size=\"sm\"\r\n                      isRound\r\n                      onClick={sendVoiceMessage}\r\n                      aria-label=\"Send voice message\"\r\n                    />\r\n                  </Tooltip>\r\n                </>\r\n              )}\r\n            </Flex>\r\n          </Box>\r\n          \r\n          {/* Recording history */}\r\n          {recordingHistory.length > 0 && (\r\n            <Box>\r\n              <Text fontSize=\"xs\" fontWeight=\"bold\" mb={1}>Recent Recordings:</Text>\r\n              <VStack spacing={1} align=\"stretch\">\r\n                {recordingHistory.map((item) => (\r\n                  <Flex\r\n                    key={item.id}\r\n                    bg={controlsBgColor}\r\n                    p={1}\r\n                    borderRadius=\"sm\"\r\n                    fontSize=\"xs\"\r\n                    align=\"center\"\r\n                    justify=\"space-between\"\r\n                  >\r\n                    <HStack>\r\n                      <IconButton\r\n                        icon={<IconWrapper icon={FaPlay} size={10} />}\r\n                        size=\"xs\"\r\n                        colorScheme=\"blue\"\r\n                        variant=\"ghost\"\r\n                        onClick={() => playHistoryItem(item.url)}\r\n                        aria-label=\"Play recording\"\r\n                      />\r\n                      <Text>\r\n                        {formatTime(item.duration)}\r\n                      </Text>\r\n                    </HStack>\r\n                    <Text fontSize=\"10px\" color=\"gray.500\">\r\n                      {new Date(item.timestamp).toLocaleTimeString()}\r\n                    </Text>\r\n                  </Flex>\r\n                ))}\r\n              </VStack>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Collapse>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default VoiceMessageRecorder; "],"names":["keyframes","strokeDasharray","strokeDashoffset","transform","progress","left","stripe","from","backgroundPosition","to","ProgressStylesProvider","useProgressStyles","createContext","name","errorMessage","ProgressFilledTrack","forwardRef","props","ref","min","max","value","isIndeterminate","role","rest","progress2","options","valueText","getValueText","percent","valueToPercent","bind","getAriaValueText","getProgressProps","trackStyles","height","filledTrack","jsx","chakra","div","style","width","__css","Progress","hasStripe","isAnimated","children","borderRadius","propBorderRadius","ariaLabel","ariaLabelledBy","ariaValueText","title","omitThemingProps","styles","useMultiStyleConfig","track","css","animation","position","willChange","minWidth","overflow","jsxs","displayName","_ref","onSendVoiceMessage","isOpen","setIsOpen","useState","isRecording","setIsRecording","recordingTime","setRecordingTime","audioBlob","setAudioBlob","audioUrl","setAudioUrl","isPlaying","setIsPlaying","recordingHistory","setRecordingHistory","mediaRecorderRef","useRef","audioChunksRef","timerRef","audioRef","Audio","bgColor","useColorModeValue","headerBgColor","borderColor","controlsBgColor","formatTime","seconds","secs","Math","floor","toString","padStart","pausePlayback","current","pause","deleteRecording","URL","revokeObjectURL","useEffect","handleEnded","addEventListener","removeEventListener","clearInterval","_jsxs","Box","bg","borderWidth","mb","Flex","align","p","borderBottomWidth","justifyContent","cursor","onClick","toggleOpen","HStack","_jsx","IconWrapper","icon","FaMicrophone","size","mr","Heading","Badge","colorScheme","variant","fontSize","FaChevronUp","FaChevronDown","Collapse","in","animateOpacity","justify","Text","fontWeight","color","gap","Tooltip","label","IconButton","isRound","async","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","ondataavailable","event","data","push","onstop","Blob","type","createObjectURL","getTracks","forEach","stop","start","setInterval","prev","error","console","alert","FaStop","stopRecording","FaPlay","playRecording","src","play","FaPause","_Fragment","FaTrash","FaPaperPlane","sendVoiceMessage","historyItem","id","Date","now","duration","timestamp","toISOString","blob","url","slice","length","VStack","spacing","map","item","playHistoryItem","toLocaleTimeString"],"sourceRoot":""}