{"version":3,"file":"static/js/722.0f090d27.chunk.js","mappings":"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","sources":["components/LazyComponents.js","components/CodingPlatformsTab.js","components/Chat.js","utils/IconWrapper.js"],"sourcesContent":["import { lazy } from 'react';\r\n\r\n// Separate file for lazy-loaded components to avoid circular dependencies\r\nexport const LazyAISettings = lazy(() => \r\n  import('./AISettings').then(module => ({\r\n    default: module.default\r\n  }))\r\n);\r\n\r\nexport const LazyProfile = lazy(() => \r\n  import('./Profile').then(module => ({\r\n    default: module.default\r\n  }))\r\n);\r\n\r\nexport const LazyLeetCodeIntegration = lazy(() => \r\n  import('./LeetCodeIntegration').then(module => ({\r\n    default: module.default\r\n  }))\r\n);\r\n\r\nexport const LazyHackerRankIntegration = lazy(() => \r\n  import('./HackerRankIntegration').then(module => ({\r\n    default: module.default\r\n  }))\r\n);\r\n\r\nexport const LazyMiniAIChat = lazy(() => \r\n  import('./MiniAIChat').then(module => ({\r\n    default: module.default\r\n  }))\r\n);\r\n\r\nexport const LazyCodeExecutionPanel = lazy(() => \r\n  import('./CodeExecutionPanel').then(module => ({\r\n    default: module.default\r\n  }))\r\n);\r\n\r\nexport const LazyVoiceMessageRecorder = lazy(() => \r\n  import('./VoiceMessageRecorder').then(module => ({\r\n    default: module.default\r\n  }))\r\n);\r\n\r\nexport const LazyCollaborativeWhiteboard = lazy(() => \r\n  import('./CollaborativeWhiteboard').then(module => ({\r\n    default: module.default\r\n  }))\r\n); ","import React, { useState, Suspense } from 'react';\r\nimport { \r\n  Box, \r\n  Tabs, \r\n  TabList, \r\n  TabPanels, \r\n  Tab, \r\n  TabPanel,\r\n  useColorModeValue,\r\n  Heading,\r\n  Flex,\r\n  Spinner,\r\n  Collapse,\r\n  Button\r\n} from '@chakra-ui/react';\r\nimport { FaCode, FaHackerrank, FaChevronDown, FaChevronUp } from 'react-icons/fa';\r\nimport { SiLeetcode } from 'react-icons/si';\r\nimport { IconWrapper } from '../utils/IconWrapper';\r\nimport { LazyLeetCodeIntegration, LazyHackerRankIntegration } from './LazyComponents';\r\n\r\nconst CodingPlatformsTab = () => {\r\n  const [tabIndex, setTabIndex] = useState(0);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const borderColor = useColorModeValue('blue.200', 'gray.600');\r\n  const tabBg = useColorModeValue('blue.50', 'gray.700');\r\n  const activeTabBg = useColorModeValue('white', 'gray.800');\r\n  const boxBg = useColorModeValue('gray.50', 'gray.800');\r\n\r\n  const handleTabsChange = (index) => {\r\n    setTabIndex(index);\r\n  };\r\n\r\n  const toggleOpen = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const LoadingFallback = () => (\r\n    <Box p={4} textAlign=\"center\">\r\n      <Spinner size=\"md\" color={useColorModeValue('blue.500', 'blue.300')} />\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Box bg={boxBg} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor} mb={4}>\r\n      <Flex \r\n        align=\"center\" \r\n        p={3} \r\n        borderBottomWidth={isOpen ? \"1px\" : \"0\"} \r\n        borderColor={borderColor}\r\n        justifyContent=\"space-between\"\r\n        cursor=\"pointer\"\r\n        onClick={toggleOpen}\r\n      >\r\n        <Flex align=\"center\">\r\n          <IconWrapper icon={FaCode} size={16} mr={2} />\r\n          <Heading size=\"sm\">Coding Platforms</Heading>\r\n        </Flex>\r\n        <IconWrapper \r\n          icon={isOpen ? FaChevronUp : FaChevronDown} \r\n          size={14} \r\n        />\r\n      </Flex>\r\n      \r\n      <Collapse in={isOpen} animateOpacity>\r\n        <Tabs \r\n          isFitted \r\n          variant=\"enclosed\" \r\n          index={tabIndex} \r\n          onChange={handleTabsChange}\r\n          colorScheme={tabIndex === 0 ? \"blue\" : \"green\"}\r\n        >\r\n          <TabList mb=\"1em\">\r\n            <Tab \r\n              _selected={{ bg: activeTabBg, borderBottomColor: activeTabBg }} \r\n              bg={tabBg}\r\n              borderTopRadius=\"md\"\r\n            >\r\n              <Flex align=\"center\">\r\n                <IconWrapper icon={SiLeetcode} size={14} mr={2} />\r\n                LeetCode\r\n              </Flex>\r\n            </Tab>\r\n            <Tab \r\n              _selected={{ bg: activeTabBg, borderBottomColor: activeTabBg }} \r\n              bg={tabBg}\r\n              borderTopRadius=\"md\"\r\n            >\r\n              <Flex align=\"center\">\r\n                <IconWrapper icon={FaHackerrank} size={14} mr={2} />\r\n                HackerRank\r\n              </Flex>\r\n            </Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel p={0}>\r\n              <Suspense fallback={<LoadingFallback />}>\r\n                <LazyLeetCodeIntegration />\r\n              </Suspense>\r\n            </TabPanel>\r\n            <TabPanel p={0}>\r\n              <Suspense fallback={<LoadingFallback />}>\r\n                <LazyHackerRankIntegration />\r\n              </Suspense>\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Collapse>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CodingPlatformsTab; ","import React, { useState, useEffect, useRef, useMemo, useCallback, memo, Suspense } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { webrtcService } from '../services/webrtc-service';\nimport aiService from '../services/ai-service';\nimport * as supabaseService from '../services/supabase-service';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FixedSizeList as List } from 'react-window';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { \n  LazyAISettings, \n  LazyProfile, \n  LazyMiniAIChat, \n  LazyCodeExecutionPanel,\n  LazyVoiceMessageRecorder,\n  LazyCollaborativeWhiteboard\n} from './LazyComponents';\nimport {\n  Box,\n  Flex,\n  Text,\n  Input,\n  Button,\n  IconButton,\n  Avatar,\n  Badge,\n  Divider,\n  InputGroup,\n  InputRightElement,\n  Tooltip,\n  useColorMode,\n  HStack,\n  VStack,\n  Spacer,\n  Heading,\n  Container,\n  useToast,\n  Tag,\n  TagLabel,\n  Card,\n  CardBody,\n  Grid,\n  Spinner,\n} from '@chakra-ui/react';\nimport { IconWrapper } from '../utils/IconWrapper';\nimport CodingPlatformsTab from './CodingPlatformsTab';\n\n// Message Status Component\nconst MessageStatus = memo(({ status, timestamp }) => {\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'sending': return '●';\n      case 'sent': return '✓';\n      case 'delivered': return '✓✓';\n      case 'read': return '✓✓';\n      case 'error': return '!';\n      case 'queued': return '⏱';\n      default: return '';\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case 'sending': return 'gray.400';\n      case 'sent': return 'blue.400';\n      case 'delivered': return 'blue.400';\n      case 'read': return 'green.400';\n      case 'error': return 'red.400';\n      case 'queued': return 'yellow.400';\n      default: return 'gray.400';\n    }\n  };\n\n  return (\n    <Flex alignItems=\"center\" fontSize=\"xs\" color=\"gray.500\">\n      {status && (\n        <Text color={getStatusColor()} mr={1} fontWeight=\"bold\">\n          {getStatusIcon()}\n        </Text>\n      )}\n      {timestamp && (\n        <Text>{new Date(timestamp).toLocaleTimeString()}</Text>\n      )}\n    </Flex>\n  );\n});\n\n// Message Item Component\nconst MessageItem = memo(({ message, onReaction, onRetry, onMarkAsRead, onDelete }) => {\n  const isSent = message.sender === 'user';\n  const { colorMode } = useColorMode();\n  \n  const handleRetry = (e) => {\n    e.stopPropagation();\n    onRetry(message);\n  };\n  \n  const handleDelete = (e) => {\n    e.stopPropagation();\n    onDelete(message);\n  };\n  \n  useEffect(() => {\n    // Send read receipt when message is visible\n    if (message.sender !== 'user' && message.status !== 'read') {\n      onMarkAsRead(message);\n    }\n  }, [message, onMarkAsRead]);\n  \n  return (\n    <Box\n      alignSelf={isSent ? 'flex-end' : 'flex-start'}\n      maxWidth=\"80%\"\n      mb={3}\n    >\n      <Card\n        bg={isSent \n          ? (colorMode === 'dark' ? 'blue.600' : 'blue.500') \n          : (colorMode === 'dark' ? 'gray.700' : 'gray.100')}\n        color={isSent ? 'white' : (colorMode === 'dark' ? 'white' : 'black')}\n        borderRadius={isSent ? \"lg 2px 2px lg\" : \"2px lg lg 2px\"}\n        boxShadow=\"sm\"\n      >\n        <CardBody py={2} px={3}>\n          <Text>{message.text}</Text>\n        </CardBody>\n      </Card>\n      <Flex \n        justifyContent={isSent ? 'flex-end' : 'flex-start'}\n        alignItems=\"center\"\n        mt={1}\n        fontSize=\"xs\"\n        color=\"gray.500\"\n      >\n        <MessageStatus status={message.status} timestamp={message.timestamp} />\n        {message.offline && (\n          <Badge ml={2} colorScheme=\"yellow\" size=\"sm\">\n            offline\n          </Badge>\n        )}\n        {message.reactions?.map((reaction, index) => (\n          <Tag key={index} size=\"sm\" ml={1} borderRadius=\"full\" variant=\"solid\" colorScheme=\"blue\">\n            <TagLabel>{reaction}</TagLabel>\n          </Tag>\n        ))}\n        {message.status === 'error' && (\n          <HStack ml={2} spacing={1}>\n            <Button size=\"xs\" colorScheme=\"blue\" onClick={handleRetry}>\n              Retry\n            </Button>\n            <Button size=\"xs\" colorScheme=\"red\" onClick={handleDelete}>\n              Delete\n            </Button>\n          </HStack>\n        )}\n      </Flex>\n    </Box>\n  );\n});\n\n// Main Chat Component\nconst Chat = ({ \n    currentUser, \n    selectedPeer, \n    isAIChatActive,\n    selectedAIModel,\n    isAiInitialized,\n    showSettings,\n    setShowSettings,\n    showTutorial,\n    setShowTutorial,\n    addNotification,\n    theme,\n    setTheme\n}) => {\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [peers, setPeers] = useState([]);\n    const [isRecording, setIsRecording] = useState(false);\n    const [mediaRecorder, setMediaRecorder] = useState(null);\n    const [typingStatus, setTypingStatus] = useState({});\n    const [searchQuery, setSearchQuery] = useState('');\n    const messagesEndRef = useRef(null);\n    const fileInputRef = useRef(null);\n    let typingTimeout = null;\n    const [smartReplies, setSmartReplies] = useState([]);\n    const [messageCompletion, setMessageCompletion] = useState('');\n    const [sentiment, setSentiment] = useState(null);\n    const [language, setLanguage] = useState(null);\n    const completionTimeout = useRef(null);\n    const [codeEditor, setCodeEditor] = useState({ visible: false, language: 'javascript', code: '' });\n    const [sharedWorkspace, setSharedWorkspace] = useState(null);\n    const [translatedMessages, setTranslatedMessages] = useState(new Map());\n    const [userLanguage, setUserLanguage] = useState(navigator.language.split('-')[0]);\n    const [showProfileModal, setShowProfileModal] = useState(false);\n    const [userProfile, setUserProfile] = useState(null);\n    const [persistenceEnabled, setPersistenceEnabled] = useState(true);\n    const [isLoadingHistory, setIsLoadingHistory] = useState(false);\n    const [activeGroups, setActiveGroups] = useState([]);\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const [connectionState, setConnectionState] = useState('connected');\n    const [offlineMode, setOfflineMode] = useState(false);\n    const [customEmojis, setCustomEmojis] = useState(['👍', '❤️', '😊', '😂', '👏', '🎉', '🔥', '🌟', '🎨', '🎮']);\n    const [emojiPickerVisible, setEmojiPickerVisible] = useState(false);\n    const [selectedMessageForReaction, setSelectedMessageForReaction] = useState(null);\n    const [voiceTranscriptionEnabled, setVoiceTranscriptionEnabled] = useState(true);\n    const [collaborativeEditingEnabled, setCollaborativeEditingEnabled] = useState(true);\n    const [messageEditHistory, setMessageEditHistory] = useState(new Map());\n    const [showAISettings, setShowAISettings] = useState(false);\n    const [useBasicChatbot, setUseBasicChatbot] = useState(true);\n    const [settings, setSettings] = useState({\n        notifications: {\n            enabled: true,\n            sound: true\n        },\n        appearance: {\n            theme: 'dark',\n            fontSize: 'medium'\n        },\n        chat: {\n            enterToSend: true,\n            readReceipts: true\n        },\n        ai: {\n            provider: 'openai',\n            apiKey: '',\n            model: 'gpt-3.5-turbo'\n        },\n        privacy: {\n            encryptMessages: true,\n            autoDeleteMessages: false\n        }\n    });\n    \n    // Basic chatbot responses\n    const basicChatbotResponses = {\n        \"hello\": \"Hello! I'm a basic chatbot. I can help you with simple tasks. Type 'help' to see what I can do.\",\n        \"hi\": \"Hi there! Need any help? Type 'help' to see what I can do.\",\n        \"help\": \"I can help you with:\\n- Basic chat features\\n- File sharing\\n- Code sharing\\n- Voice messages\\nTo enable AI features, click the settings icon and configure your API key.\",\n        \"how are you\": \"I'm functioning well! How can I assist you today?\",\n        \"bye\": \"Goodbye! Have a great day!\",\n        \"features\": \"Current features:\\n- Real-time messaging\\n- File sharing\\n- Code sharing\\n- Voice messages\\n- Reactions\\nEnable AI for more advanced features!\",\n        \"ai\": \"To enable AI features, click the settings icon (⚙️) and configure your API key. This will unlock:\\n- Smart replies\\n- Message completion\\n- Sentiment analysis\\n- Language translation\"\n    };\n\n    // Basic chatbot response handler\n    const getBasicChatbotResponse = (message) => {\n        const lowercaseMessage = message.toLowerCase().trim();\n        for (const [key, response] of Object.entries(basicChatbotResponses)) {\n            if (lowercaseMessage.includes(key)) {\n                return response;\n            }\n        }\n        return \"I'm a basic chatbot. I can only understand simple commands. Type 'help' to see what I can do.\";\n    };\n    \n    // Handler for settings changes\n    const handleSettingsChange = (section, key, value) => {\n        setSettings(prev => ({\n            ...prev,\n            [section]: {\n                ...prev[section],\n                [key]: value\n            }\n        }));\n    };\n    \n    // Toggle settings panel\n    const toggleSettings = () => {\n        setShowSettings(!showSettings);\n    };\n    \n    // Handler for retrying failed messages\n    const handleRetry = (message) => {\n        if (!selectedPeer) return;\n        \n        setMessages(prev => prev.map(msg => \n            msg.id === message.id ? { ...msg, status: 'sending' } : msg\n        ));\n        \n        const success = webrtcService.sendMessage(message, selectedPeer);\n        \n        if (success) {\n            setMessages(prev => prev.map(msg => \n                msg.id === message.id ? { ...msg, status: 'sent', error: null } : msg\n            ));\n        } else {\n            setMessages(prev => prev.map(msg => \n                msg.id === message.id ? { ...msg, status: 'error', error: 'Failed to send message' } : msg\n            ));\n        }\n    };\n    \n    // Handler for marking messages as read\n    const handleMarkAsRead = (message) => {\n        if (!selectedPeer) return;\n        \n        setMessages(prev => prev.map(msg => \n            msg.id === message.id ? { ...msg, status: 'read' } : msg\n        ));\n        \n        webrtcService.sendReadReceipt(message.id, selectedPeer);\n    };\n    \n    // Handler for deleting messages\n    const handleDeleteMessage = (message) => {\n        setMessages(prev => prev.filter(msg => msg.id !== message.id));\n        \n        if (!isAIChatActive && selectedPeer) {\n            webrtcService.sendMessage({\n                type: 'DELETE_MESSAGE',\n                messageId: message.id,\n                sender: currentUser.id,\n                timestamp: new Date().toISOString()\n            }, selectedPeer);\n        }\n    };\n    \n    useEffect(() => {\n        const savedProfile = JSON.parse(localStorage.getItem('user_profile')) || null;\n        if (savedProfile) {\n            setUserProfile(savedProfile);\n        } else {\n            const defaultProfile = {\n                displayName: `User-${currentUser?.id?.substring(0, 6)}`,\n                avatarUrl: ''\n            };\n            setUserProfile(defaultProfile);\n        }\n    }, [currentUser?.id]);\n\n    const handleProfileUpdate = (profileData) => {\n        setUserProfile(profileData);\n    };\n\n    const handleTranslateMessage = async (messageId, text) => {\n        if (translatedMessages.has(messageId)) {\n            const newTranslatedMessages = new Map(translatedMessages);\n            newTranslatedMessages.delete(messageId);\n            setTranslatedMessages(newTranslatedMessages);\n        } else {\n            try {\n                const translatedText = await aiService.translateText(text, userLanguage);\n                const newTranslatedMessages = new Map(translatedMessages);\n                newTranslatedMessages.set(messageId, translatedText);\n                setTranslatedMessages(newTranslatedMessages);\n            } catch (error) {\n                console.error('Translation error:', error);\n                addNotification('Failed to translate message', 'error');\n            }\n        }\n    };\n\n    const handleFileSelect = async (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        const fileMessage = {\n            id: uuidv4(),\n            type: 'FILE_META',\n            name: file.name,\n            size: file.size,\n            sender: currentUser.id,\n            timestamp: new Date().toISOString()\n        };\n\n        setMessages(prev => [...prev, fileMessage]);\n        if (!isAIChatActive && selectedPeer) {\n            webrtcService.sendMessage(fileMessage, selectedPeer);\n            await webrtcService.sendFile(file, selectedPeer);\n        }\n\n        event.target.value = '';\n    };\n\n    const handleReaction = (messageId, emoji) => {\n        const reactionMessage = {\n            type: 'REACTION',\n            messageId,\n            reaction: emoji,\n            sender: currentUser.id,\n            timestamp: new Date().toISOString()\n        };\n\n        setMessages(prev => prev.map(msg =>\n            msg.id === messageId\n                ? { ...msg, reactions: [...(msg.reactions || []), emoji] }\n                : msg\n        ));\n\n        if (!isAIChatActive && selectedPeer) {\n            webrtcService.sendMessage(reactionMessage, selectedPeer);\n        }\n    };\n\n    const handleCustomEmojiAdd = (emoji) => {\n        if (!customEmojis.includes(emoji)) {\n            setCustomEmojis(prev => [...prev, emoji]);\n        }\n        if (selectedMessageForReaction) {\n            handleReaction(selectedMessageForReaction, emoji);\n            setSelectedMessageForReaction(null);\n            setEmojiPickerVisible(false);\n        }\n    };\n\n    const handleVoiceTranscription = async (audioBlob) => {\n        if (!voiceTranscriptionEnabled) return null;\n        try {\n            const transcription = await aiService.transcribeAudio(audioBlob);\n            return transcription;\n        } catch (error) {\n            console.error('Transcription error:', error);\n            addNotification('Failed to transcribe voice message', 'error');\n            return null;\n        }\n    };\n\n    const handleCollaborativeEdit = (messageId, newContent) => {\n        if (!collaborativeEditingEnabled) return;\n        \n        const editHistory = messageEditHistory.get(messageId) || [];\n        const editData = {\n            timestamp: new Date().toISOString(),\n            content: newContent,\n            editor: currentUser.id\n        };\n        \n        setMessageEditHistory(prev => {\n            const newMap = new Map(prev);\n            newMap.set(messageId, [...editHistory, editData]);\n            return newMap;\n        });\n\n        setMessages(prev => prev.map(msg =>\n            msg.id === messageId\n                ? { ...msg, text: newContent, isEdited: true, editHistory: [...editHistory, editData] }\n                : msg\n        ));\n\n        if (!isAIChatActive && selectedPeer) {\n            webrtcService.sendMessage({\n                type: 'EDIT_MESSAGE',\n                messageId,\n                newContent,\n                editData,\n                sender: currentUser.id,\n                timestamp: new Date().toISOString()\n            }, selectedPeer);\n        }\n    };\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [messages]);\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    const handleInputChange = (e) => {\n        setNewMessage(e.target.value);\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            handleSendMessage();\n        }\n    };\n\n    const handleSendMessage = async (e) => {\n        if (e) e.preventDefault();\n        if (!newMessage.trim()) return;\n\n        const messageId = uuidv4();\n        const timestamp = new Date().toISOString();\n\n        const messageData = {\n            id: messageId,\n            text: newMessage,\n            sender: currentUser.id,\n            timestamp: timestamp,\n            type: 'CHAT',\n            status: 'sending'\n        };\n\n        setMessages(prev => [...prev, messageData]);\n        setNewMessage('');\n        setMessageCompletion('');\n        \n        if (isAIChatActive) {\n            if (!isAiInitialized) {\n                if (useBasicChatbot) {\n                    const botResponse = {\n                        type: 'CHAT',\n                        text: getBasicChatbotResponse(newMessage),\n                        timestamp: new Date().toISOString(),\n                        sender: 'AI_ASSISTANT',\n                        id: uuidv4(),\n                        isAI: true\n                    };\n                    setMessages(prev => [...prev, botResponse]);\n                } else {\n                    addNotification('Please configure AI settings first', 'error');\n                    setShowAISettings(true);\n                }\n                return;\n            }\n\n            try {\n                const response = await aiService.handleHelpQuery(newMessage);\n                setMessages(prev => [...prev, response]);\n            } catch (error) {\n                console.error('Error getting AI response:', error);\n                addNotification('Failed to get AI response', 'error');\n                if (error.message.includes('API key')) {\n                    setShowAISettings(true);\n                }\n            }\n        } else if (selectedPeer) {\n            const success = webrtcService.sendMessage(messageData, selectedPeer);\n            \n            if (success) {\n                setMessages(prev => prev.map(msg => \n                    msg.id === messageId ? { ...msg, status: 'sent' } : msg\n                ));\n            } else if (offlineMode && persistenceEnabled) {\n                setMessages(prev => prev.map(msg => \n                    msg.id === messageId ? { ...msg, status: 'queued', offline: true } : msg\n                ));\n            } else {\n                setMessages(prev => prev.map(msg => \n                    msg.id === messageId ? { ...msg, status: 'error', error: 'Failed to send message' } : msg\n                ));\n            }\n            \n            if (selectedPeer) {\n                webrtcService.setTypingStatus(false, selectedPeer);\n            }\n        } else if (selectedGroup) {\n            const groupMessageData = {\n                ...messageData,\n                groupId: selectedGroup.id\n            };\n            \n            const success = webrtcService.sendMessage(groupMessageData);\n            \n            if (success) {\n                setMessages(prev => prev.map(msg => \n                    msg.id === messageId ? { ...msg, status: 'sent' } : msg\n                ));\n            } else if (offlineMode && persistenceEnabled) {\n                setMessages(prev => prev.map(msg => \n                    msg.id === messageId ? { ...msg, status: 'queued', offline: true } : msg\n                ));\n            } else {\n                setMessages(prev => prev.map(msg => \n                    msg.id === messageId ? { ...msg, status: 'error', error: 'Failed to send message' } : msg\n                ));\n            }\n        }\n\n        if (selectedPeer) {\n            webrtcService.setTypingStatus(false, selectedPeer);\n        }\n    };\n\n    const handleShareCode = () => {\n        if (!codeEditor.code.trim()) return;\n\n        const codeMessage = {\n            id: uuidv4(),\n            type: 'CODE_SHARE',\n            code: codeEditor.code,\n            language: codeEditor.language,\n            sender: currentUser.id,\n            timestamp: Date.now(),\n            workspaceId: uuidv4()\n        };\n\n        setMessages(prev => [...prev, codeMessage]);\n        setCodeEditor({ ...codeEditor, visible: false, code: '' });\n\n        if (!isAIChatActive) {\n            webrtcService.sendMessage(codeMessage);\n        }\n    };\n\n    // Memoized filtered messages\n    const filteredMessages = useMemo(() => {\n        return messages.filter(msg => \n            !searchQuery || \n            (msg.text && msg.text.toLowerCase().includes(searchQuery.toLowerCase()))\n        );\n    }, [messages, searchQuery]);\n\n    const MessageRow = ({ index, style }) => {\n        const message = filteredMessages[index];\n        const isAIMessage = isAIChatActive && message.sender === 'AI_ASSISTANT';\n        const isSystemMessage = message.isSystemMessage;\n        const isEditable = message.sender === currentUser.id && !isAIMessage && !isSystemMessage;\n        \n        if (isSystemMessage) {\n            return (\n                <div style={style}>\n                    <div className=\"system-message\">\n                        <div className=\"system-message-content\">\n                            <span className=\"system-icon\">🔔</span>\n                            <p>{message.text}</p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        \n        return (\n            <div style={style}>\n                <div\n                    className={`message ${message.sender === currentUser.id ? 'sent' : 'received'} ${isAIMessage ? 'ai-message' : ''} ${message.isEdited ? 'edited' : ''}`}\n                    data-sender={message.sender}\n                >\n                    <div className=\"message-content\">\n                        {message.type === 'CHAT' && (\n                            <>\n                                {isEditable ? (\n                                    <div className=\"editable-message\">\n                                        <p>{message.text}</p>\n                                        <button \n                                            className=\"edit-button\"\n                                            onClick={() => handleCollaborativeEdit(message.id, message.text)}\n                                        >\n                                            ✏️\n                                        </button>\n                                    </div>\n                                ) : (\n                                    <p>{message.text}</p>\n                                )}\n                                {message.isEdited && (\n                                    <span className=\"edit-indicator\">\n                                        edited {new Date(message.editHistory?.slice(-1)[0]?.timestamp).toLocaleTimeString()}\n                                    </span>\n                                )}\n                                {translatedMessages.has(message.id) && (\n                                    <p className=\"translated-text\">\n                                        {translatedMessages.get(message.id)}\n                                    </p>\n                                )}\n                                <MessageStatus \n                                    status={message.status} \n                                    timestamp={message.timestamp} \n                                />\n                                {message.status === 'error' && (\n                                    <div className=\"message-actions\">\n                                        <button \n                                            className=\"retry-button\"\n                                            onClick={() => handleRetry(message)}\n                                        >\n                                            Retry\n                                        </button>\n                                        <button \n                                            className=\"delete-button\"\n                                            onClick={() => handleDeleteMessage(message)}\n                                        >\n                                            Delete\n                                        </button>\n                                    </div>\n                                )}\n                                {message.offline && <span className=\"offline-indicator\">offline</span>}\n                                <div className=\"message-actions\">\n                                    <button \n                                        className=\"translate-button\"\n                                        onClick={() => handleTranslateMessage(message.id, message.text)}\n                                    >\n                                        {translatedMessages.has(message.id) ? 'Show Original' : '🌐 Translate'}\n                                    </button>\n                                    <button\n                                        className=\"reaction-button\"\n                                        onClick={() => {\n                                            setSelectedMessageForReaction(message.id);\n                                            setEmojiPickerVisible(true);\n                                        }}\n                                    >\n                                        😊 React\n                                    </button>\n                                </div>\n                                {message.sentiment && (\n                                    <span className={`sentiment-indicator ${message.sentiment.toLowerCase()}`}>\n                                        {message.sentiment === 'POSITIVE' ? '😊' : \n                                         message.sentiment === 'NEGATIVE' ? '😔' : '😐'}\n                                    </span>\n                                )}\n                                {message.language && (\n                                    <span className=\"language-indicator\">\n                                        {message.language}\n                                    </span>\n                                )}\n                            </>\n                        )}\n                        {message.type === 'VOICE_MESSAGE' && (\n                            <div className=\"voice-message\">\n                                <audio controls src={message.audioUrl} />\n                                {message.transcription && (\n                                    <div className=\"transcription\">\n                                        <p><i>Transcription: {message.transcription}</i></p>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                        {message.type === 'FILE_META' && (\n                            <div className=\"file-message\">\n                                <span>📎 {message.name}</span>\n                                <span className=\"file-size\">\n                                    {(message.size / 1024).toFixed(1)} KB\n                                </span>\n                            </div>\n                        )}\n                        {message.type === 'CODE_SHARE' && (\n                            <div className=\"code-share-container\">\n                                <div className=\"code-header\">\n                                    <span className=\"language-tag\">{message.language}</span>\n                                    <button onClick={() => navigator.clipboard.writeText(message.code)}>\n                                        Copy Code\n                                    </button>\n                                    {message.sender === currentUser.id && (\n                                        <button onClick={() => setSharedWorkspace(message.workspaceId)}>\n                                            Edit Live\n                                        </button>\n                                    )}\n                                </div>\n                                <SyntaxHighlighter \n                                    language={message.language}\n                                    style={atomDark}\n                                    showLineNumbers={true}\n                                >\n                                    {message.code}\n                                </SyntaxHighlighter>\n                            </div>\n                        )}\n                        <span className=\"timestamp\">\n                            {new Date(message.timestamp).toLocaleTimeString()}\n                        </span>\n                        <div className=\"message-reactions\">\n                            {message.reactions?.map((reaction, i) => (\n                                <span key={i} className=\"reaction\">{reaction}</span>\n                            ))}\n                            <div className=\"reaction-picker\">\n                                {['👍', '❤️', '😊', '😂', '👏', '🎉'].map(emoji => (\n                                    <span\n                                        key={emoji}\n                                        onClick={() => handleReaction(message.id, emoji)}\n                                        className=\"reaction-option\"\n                                    >\n                                        {emoji}\n                                    </span>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    const renderSettingsPanel = () => {\n        if (!showSettings) return null;\n        \n        return (\n            <div className=\"settings-panel\">\n                <div className=\"settings-header\">\n                    <h2>Settings</h2>\n                    <button className=\"close-button\" onClick={() => setShowSettings(false)}>×</button>\n                </div>\n                <div className=\"settings-content\">\n                    <div className=\"settings-section\">\n                        <h3>Notifications</h3>\n                        <div className=\"settings-group\">\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={settings.notifications.enabled}\n                                    onChange={(e) => handleSettingsChange('notifications', 'enabled', e.target.checked)}\n                                />\n                                Enable Notifications\n                            </label>\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={settings.notifications.sound}\n                                    onChange={(e) => handleSettingsChange('notifications', 'sound', e.target.checked)}\n                                />\n                                Sound Effects\n                            </label>\n                        </div>\n                    </div>\n                    \n                    <div className=\"settings-section\">\n                        <h3>Appearance</h3>\n                        <div className=\"settings-group\">\n                            <label>Theme</label>\n                            <select\n                                value={settings.appearance.theme}\n                                onChange={(e) => handleSettingsChange('appearance', 'theme', e.target.value)}\n                            >\n                                <option value=\"light\">Light</option>\n                                <option value=\"dark\">Dark</option>\n                            </select>\n                            \n                            <label>Font Size</label>\n                            <select\n                                value={settings.appearance.fontSize}\n                                onChange={(e) => handleSettingsChange('appearance', 'fontSize', e.target.value)}\n                            >\n                                <option value=\"small\">Small</option>\n                                <option value=\"medium\">Medium</option>\n                                <option value=\"large\">Large</option>\n                            </select>\n                        </div>\n                    </div>\n                    \n                    <div className=\"settings-section\">\n                        <h3>Chat</h3>\n                        <div className=\"settings-group\">\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={settings.chat.enterToSend}\n                                    onChange={(e) => handleSettingsChange('chat', 'enterToSend', e.target.checked)}\n                                />\n                                Press Enter to Send\n                            </label>\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={settings.chat.readReceipts}\n                                    onChange={(e) => handleSettingsChange('chat', 'readReceipts', e.target.checked)}\n                                />\n                                Read Receipts\n                            </label>\n                        </div>\n                    </div>\n                    \n                    <div className=\"settings-section\">\n                        <h3>Message Features</h3>\n                        <div className=\"settings-group\">\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={voiceTranscriptionEnabled}\n                                    onChange={(e) => setVoiceTranscriptionEnabled(e.target.checked)}\n                                />\n                                Voice Message Transcription\n                            </label>\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={collaborativeEditingEnabled}\n                                    onChange={(e) => setCollaborativeEditingEnabled(e.target.checked)}\n                                />\n                                Collaborative Editing\n                            </label>\n                        </div>\n                    </div>\n\n                    <div className=\"settings-section\">\n                        <h3>AI Settings</h3>\n                        <div className=\"settings-group\">\n                            <label>Provider</label>\n                            <select\n                                value={settings.ai.provider}\n                                onChange={(e) => handleSettingsChange('ai', 'provider', e.target.value)}\n                            >\n                                <option value=\"openai\">OpenAI</option>\n                                <option value=\"gemini\">Google Gemini</option>\n                                <option value=\"ollama\">Ollama (Local)</option>\n                            </select>\n                            \n                            <label>API Key</label>\n                            <input\n                                type=\"password\"\n                                value={settings.ai.apiKey}\n                                onChange={(e) => handleSettingsChange('ai', 'apiKey', e.target.value)}\n                                placeholder=\"Enter your API key\"\n                            />\n                            \n                            <label>Model</label>\n                            <select\n                                value={settings.ai.model}\n                                onChange={(e) => handleSettingsChange('ai', 'model', e.target.value)}\n                            >\n                                <option value=\"gpt-3.5-turbo\">GPT-3.5 Turbo</option>\n                                <option value=\"gpt-4\">GPT-4</option>\n                            </select>\n                        </div>\n                    </div>\n                    \n                    <div className=\"settings-section\">\n                        <h3>Privacy</h3>\n                        <div className=\"settings-group\">\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={settings.privacy.encryptMessages}\n                                    onChange={(e) => handleSettingsChange('privacy', 'encryptMessages', e.target.checked)}\n                                />\n                                Encrypt Messages\n                            </label>\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={settings.privacy.autoDeleteMessages}\n                                    onChange={(e) => handleSettingsChange('privacy', 'autoDeleteMessages', e.target.checked)}\n                                />\n                                Auto Delete Messages\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    const memoizedMessageList = useMemo(() => (\n        <div className=\"messages-list\">\n            {filteredMessages.map(message => (\n                <MessageItem\n                    key={message.id}\n                    message={message}\n                    onReaction={(reaction) => handleReaction(message.id, reaction)}\n                    onRetry={handleRetry}\n                    onMarkAsRead={handleMarkAsRead}\n                    onDelete={handleDeleteMessage}\n                />\n            ))}\n        </div>\n    ), [filteredMessages, handleReaction, handleRetry, handleMarkAsRead, handleDeleteMessage]);\n\n    const createGroup = async (name, members) => {\n        try {\n            const result = await webrtcService.createGroup(name, members);\n            \n            if (!result.success) {\n                throw new Error(result.error || 'Failed to create group');\n            }\n            \n            addNotification(`Group \"${name}\" created successfully`, 'success');\n            setActiveGroups(prev => [...prev, result.group]);\n            setSelectedGroup(result.group);\n        } catch (error) {\n            console.error('Error creating group:', error);\n            addNotification('Failed to create group', 'error');\n        }\n    };\n\n    const togglePersistence = () => {\n        const newValue = !persistenceEnabled;\n        setPersistenceEnabled(newValue);\n        webrtcService.enablePersistence(newValue);\n        addNotification(`Message persistence ${newValue ? 'enabled' : 'disabled'}`, 'info');\n    };\n\n    const handleConnectWithPeers = () => {\n        webrtcService.showConnectionDialog();\n    };\n\n    // Modified rendering for modals using our LazyComponents\n    const renderAISettings = () => {\n        if (!showAISettings) return null;\n        \n        return (\n            <Suspense fallback={<Box p={4}>Loading settings...</Box>}>\n                <LazyAISettings \n                    onClose={() => setShowAISettings(false)} \n                    addNotification={addNotification} \n                    currentUser={currentUser}\n                />\n            </Suspense>\n        );\n    };\n    \n    const renderProfileModal = () => {\n        if (!showProfileModal) return null;\n        \n        return (\n            <Suspense fallback={<Box p={4}>Loading profile...</Box>}>\n                <LazyProfile \n                    currentUser={currentUser} \n                    onClose={() => setShowProfileModal(false)} \n                    onProfileUpdate={handleProfileUpdate}\n                />\n            </Suspense>\n        );\n    };\n\n    return (\n        <Flex \n            direction=\"column\" \n            h=\"100vh\" \n            bg={colorMode === 'dark' ? 'gray.900' : 'gray.50'}\n        >\n            {/* Chat header */}\n            <Flex \n                p={3} \n                bg={colorMode === 'dark' ? 'gray.800' : 'gray.50'} \n                borderBottomWidth=\"1px\"\n                borderBottomColor={colorMode === 'dark' ? 'gray.700' : 'gray.200'}\n                alignItems=\"center\"\n                boxShadow=\"sm\"\n            >\n                <Box>\n                    <Flex alignItems=\"center\">\n                        <Avatar \n                            size=\"md\" \n                            name={isAIChatActive ? \"AI\" : selectedPeer || \"User\"} \n                            bg={isAIChatActive ? \"purple.500\" : \"blue.500\"}\n                            mr={3}\n                        />\n                        <Box>\n                            <Heading size=\"md\">\n                                {isAIChatActive ? 'Echo AI Assistant' : userProfile?.displayName || selectedPeer || 'Select a peer'}\n                            </Heading>\n                            <Flex alignItems=\"center\">\n                                <Badge \n                                    colorScheme={isAIChatActive ? \"purple\" : \"blue\"}\n                                    variant=\"subtle\"\n                                    fontSize=\"xs\"\n                                    px={2}\n                                    py={0.5}\n                                    borderRadius=\"full\"\n                                >\n                                    {isAIChatActive ? '🤖 AI Chat' : '👥 Peer Chat'}\n                                </Badge>\n                                {!isAIChatActive && typingStatus[selectedPeer] && (\n                                    <Text ml={2} fontSize=\"xs\" color=\"gray.500\" fontStyle=\"italic\">\n                                        typing...\n                                    </Text>\n                                )}\n                            </Flex>\n                        </Box>\n                    </Flex>\n                </Box>\n                <Spacer />\n                <HStack spacing={1}>\n                    <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => navigate('/dashboard')}\n                        colorScheme=\"blue\"\n                        borderRadius=\"full\"\n                        _hover={{ bg: colorMode === 'dark' ? 'blue.800' : 'blue.50' }}\n                    >\n                        Dashboard\n                    </Button>\n                    <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => navigate('/github')}\n                        colorScheme=\"blue\"\n                        borderRadius=\"full\"\n                        _hover={{ bg: colorMode === 'dark' ? 'blue.800' : 'blue.50' }}\n                    >\n                        GitHub\n                    </Button>\n                    <IconButton\n                        aria-label=\"Settings\"\n                        icon={'⚙️'}\n                        variant=\"ghost\"\n                        borderRadius=\"full\"\n                        onClick={() => setShowSettings(!showSettings)}\n                    />\n                </HStack>\n            </Flex>\n\n            {/* Chat content area */}\n            <Flex flex=\"1\" overflow=\"hidden\">\n                <Box \n                    w=\"250px\" \n                    bg={colorMode === 'dark' ? 'gray.800' : 'gray.50'} \n                    p={4}\n                    borderRightWidth=\"1px\"\n                    borderRightColor={colorMode === 'dark' ? 'gray.700' : 'gray.200'}\n                    overflowY=\"auto\"\n                    display={{ base: 'none', md: 'block' }}\n                >\n                    <VStack spacing={4} align=\"stretch\">\n                        <Box>\n                            <Heading size=\"sm\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>Your ID</Heading>\n                            <Flex \n                                bg={colorMode === 'dark' ? 'gray.700' : 'gray.50'} \n                                p={2} \n                                borderRadius=\"md\"\n                                alignItems=\"center\"\n                                justifyContent=\"space-between\"\n                                borderWidth=\"1px\"\n                                borderColor={colorMode === 'dark' ? 'gray.600' : 'gray.200'}\n                            >\n                                <Text fontSize=\"sm\" fontFamily=\"monospace\" isTruncated>\n                                    {currentUser?.id || '380b5d29-aed6-4904-891a-5d0a39b2e4df'}\n                                </Text>\n                                <IconButton\n                                    aria-label=\"Copy ID\"\n                                    icon={'📋'}\n                                    size=\"xs\"\n                                    variant=\"ghost\"\n                                    onClick={() => {\n                                        navigator.clipboard.writeText(currentUser?.id);\n                                        toast({\n                                            title: \"ID copied to clipboard\",\n                                            status: \"success\",\n                                            duration: 2000,\n                                        });\n                                    }}\n                                />\n                            </Flex>\n                        </Box>\n                        \n                        <Box \n                            p={3} \n                            bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'} \n                            borderRadius=\"md\"\n                            borderWidth=\"1px\"\n                            borderColor={colorMode === 'dark' ? 'gray.600' : 'blue.100'}\n                        >\n                            <Heading size=\"sm\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>Connect with Others</Heading>\n                            <Text fontSize=\"xs\" mb={2}>1. Share your ID with friends</Text>\n                            <Text fontSize=\"xs\" mb={2}>2. Or enter their ID below to connect</Text>\n                            <Input \n                                placeholder=\"Paste friend's ID here\" \n                                size=\"sm\" \n                                mb={2}\n                                bg={colorMode === 'dark' ? 'gray.600' : 'white'}\n                                borderColor={colorMode === 'dark' ? 'gray.500' : 'gray.300'}\n                            />\n                            <Button \n                                colorScheme=\"blue\" \n                                size=\"sm\" \n                                width=\"full\"\n                                borderRadius=\"md\"\n                            >\n                                Connect\n                            </Button>\n                        </Box>\n                        \n                        <Divider borderColor={colorMode === 'dark' ? 'gray.600' : 'gray.200'} />\n                        \n                        <Box>\n                            <Heading size=\"sm\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>\n                                Welcome to Echo Link! 👋\n                            </Heading>\n                            <Text fontSize=\"xs\" mb={2} fontWeight=\"medium\">To start chatting:</Text>\n                            <Box fontSize=\"xs\" color={colorMode === 'dark' ? 'gray.300' : 'gray.600'}>\n                                <HStack mb={1}>\n                                    <Text>1.</Text>\n                                    <Text>Copy your ID using the button above</Text>\n                                </HStack>\n                                <HStack mb={1}>\n                                    <Text>2.</Text>\n                                    <Text>Share it with your friends</Text>\n                                </HStack>\n                                <HStack mb={1}>\n                                    <Text>3.</Text>\n                                    <Text>Ask them to paste it in their connect field</Text>\n                                </HStack>\n                                <HStack mb={1}>\n                                    <Text>4.</Text>\n                                    <Text>Or paste their ID in your connect field</Text>\n                                </HStack>\n                            </Box>\n                        </Box>\n                    </VStack>\n                </Box>\n\n                {/* Chat messages area */}\n                <Flex \n                    flex=\"1\" \n                    direction=\"column\" \n                    p={4}\n                    overflowY=\"auto\"\n                    bg={colorMode === 'dark' ? 'gray.800' : 'gray.50'}\n                >\n                    {filteredMessages.length === 0 ? (\n                        <Flex \n                            direction=\"column\" \n                            alignItems=\"center\" \n                            justifyContent=\"center\" \n                            textAlign=\"center\"\n                            height=\"100%\"\n                        >\n                            <Box \n                                fontSize=\"5xl\" \n                                mb={4} \n                                bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'} \n                                p={5} \n                                borderRadius=\"full\"\n                                color={colorMode === 'dark' ? 'blue.200' : 'blue.500'}\n                            >\n                                👋\n                            </Box>\n                            <Heading size=\"md\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>\n                                Start a conversation\n                            </Heading>\n                            <Text mb={4} color={colorMode === 'dark' ? 'gray.400' : 'gray.600'} maxWidth=\"400px\">\n                                Connect with someone to chat or try out the AI assistant. Your messages will appear here.\n                            </Text>\n                            <HStack spacing={4}>\n                                <Button \n                                    colorScheme=\"blue\" \n                                    borderRadius=\"full\"\n                                    boxShadow=\"md\"\n                                    leftIcon=\"👥\"\n                                    onClick={handleConnectWithPeers}\n                                    _hover={{ transform: 'translateY(-2px)', boxShadow: 'lg' }}\n                                    transition=\"all 0.2s\"\n                                >\n                                    Connect\n                                </Button>\n                                <Button \n                                    colorScheme=\"purple\" \n                                    borderRadius=\"full\"\n                                    boxShadow=\"md\"\n                                    leftIcon=\"🤖\"\n                                    onClick={() => navigate('/ai')}\n                                    _hover={{ transform: 'translateY(-2px)', boxShadow: 'lg' }}\n                                    transition=\"all 0.2s\"\n                                >\n                                    Try AI Chat\n                                </Button>\n                            </HStack>\n                        </Flex>\n                    ) : (\n                        <VStack spacing={2} align=\"stretch\">\n                            {filteredMessages.map(message => (\n                                <MessageItem\n                                    key={message.id}\n                                    message={message}\n                                    onReaction={handleReaction}\n                                    onRetry={handleRetry}\n                                    onMarkAsRead={handleMarkAsRead}\n                                    onDelete={handleDeleteMessage}\n                                />\n                            ))}\n                            <div ref={messagesEndRef} />\n                        </VStack>\n                    )}\n                </Flex>\n\n                {/* New right sidebar */}\n                <Box \n                    w=\"280px\" \n                    bg={colorMode === 'dark' ? 'gray.800' : 'gray.50'} \n                    p={4}\n                    borderLeftWidth=\"1px\"\n                    borderLeftColor={colorMode === 'dark' ? 'gray.700' : 'gray.200'}\n                    overflowY=\"auto\"\n                    display={{ base: 'none', lg: 'block' }}\n                >\n                    <VStack spacing={4} align=\"stretch\">\n                        {/* Contact info */}\n                        {selectedPeer && (\n                            <Box \n                                p={3} \n                                bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'} \n                                borderRadius=\"md\"\n                                borderWidth=\"1px\"\n                                borderColor={colorMode === 'dark' ? 'gray.600' : 'blue.100'}\n                            >\n                                <Heading size=\"sm\" mb={3} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>\n                                    Contact Info\n                                </Heading>\n                                <VStack align=\"start\" spacing={2}>\n                                    <HStack>\n                                        <Text fontSize=\"xs\" fontWeight=\"bold\">Name:</Text>\n                                        <Text fontSize=\"xs\">{userProfile?.displayName || selectedPeer}</Text>\n                                    </HStack>\n                                    <HStack>\n                                        <Text fontSize=\"xs\" fontWeight=\"bold\">Status:</Text>\n                                        <Badge colorScheme=\"green\" fontSize=\"xs\">Online</Badge>\n                                    </HStack>\n                                    <HStack>\n                                        <Text fontSize=\"xs\" fontWeight=\"bold\">ID:</Text>\n                                        <Text fontSize=\"xs\" isTruncated>{selectedPeer}</Text>\n                                    </HStack>\n                                </VStack>\n                            </Box>\n                        )}\n\n                        {/* Mini AI Chat */}\n                        <Suspense fallback={<Box p={2} textAlign=\"center\"><Spinner size=\"sm\" /></Box>}>\n                            <LazyMiniAIChat />\n                        </Suspense>\n\n                        {/* Code Execution Panel */}\n                        <Suspense fallback={<Box p={2} textAlign=\"center\"><Spinner size=\"sm\" /></Box>}>\n                            <LazyCodeExecutionPanel onShareCode={handleShareCode} />\n                        </Suspense>\n\n                        {/* Voice Message Recorder */}\n                        <Suspense fallback={<Box p={2} textAlign=\"center\"><Spinner size=\"sm\" /></Box>}>\n                            <LazyVoiceMessageRecorder onSendVoiceMessage={handleVoiceTranscription} />\n                        </Suspense>\n\n                        {/* Collaborative Whiteboard */}\n                        <Suspense fallback={<Box p={2} textAlign=\"center\"><Spinner size=\"sm\" /></Box>}>\n                            <LazyCollaborativeWhiteboard onShareWhiteboard={(blob, filename) => {\n                                // Handle sharing whiteboard image\n                                // For now, just create a message with the image\n                                const reader = new FileReader();\n                                reader.readAsDataURL(blob);\n                                reader.onloadend = () => {\n                                    const base64data = reader.result;\n                                    const newMessage = {\n                                        id: uuidv4(),\n                                        sender: 'user',\n                                        text: `Shared whiteboard: ${filename}`,\n                                        timestamp: new Date().toISOString(),\n                                        type: 'IMAGE',\n                                        imageData: base64data\n                                    };\n                                    setMessages(prev => [...prev, newMessage]);\n                                    scrollToBottom();\n                                };\n                            }} />\n                        </Suspense>\n\n                        {/* Quick actions */}\n                        <Box>\n                            <Heading size=\"sm\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>\n                                Quick Actions\n                            </Heading>\n                            <VStack spacing={2}>\n                                <Button\n                                    leftIcon={'📁'}\n                                    colorScheme=\"blue\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    width=\"full\"\n                                    justifyContent=\"flex-start\"\n                                    onClick={() => fileInputRef.current?.click()}\n                                    borderRadius=\"md\"\n                                    bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'}\n                                >\n                                    Send a file\n                                </Button>\n                                <Button\n                                    leftIcon={'💻'}\n                                    colorScheme=\"purple\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    width=\"full\"\n                                    justifyContent=\"flex-start\"\n                                    onClick={() => setCodeEditor({ ...codeEditor, visible: true })}\n                                    borderRadius=\"md\"\n                                    bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'}\n                                >\n                                    Share code\n                                </Button>\n                                <Button\n                                    leftIcon={'🔄'}\n                                    colorScheme=\"green\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    width=\"full\"\n                                    justifyContent=\"flex-start\"\n                                    onClick={() => setShowAISettings(true)}\n                                    borderRadius=\"md\"\n                                    bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'}\n                                >\n                                    AI settings\n                                </Button>\n                                <Button\n                                    leftIcon={'📊'}\n                                    colorScheme=\"orange\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    width=\"full\"\n                                    justifyContent=\"flex-start\"\n                                    onClick={() => navigate('/dashboard')}\n                                    borderRadius=\"md\"\n                                    bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'}\n                                >\n                                    View stats\n                                </Button>\n                            </VStack>\n                        </Box>\n                        \n                        {/* Media shared section */}\n                        <Box>\n                            <Heading size=\"sm\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>\n                                Shared Media\n                            </Heading>\n                            <Grid templateColumns=\"repeat(3, 1fr)\" gap={2}>\n                                {filteredMessages\n                                    .filter(msg => msg.type === 'FILE_META')\n                                    .slice(0, 6)\n                                    .map((file, index) => (\n                                        <Box \n                                            key={index}\n                                            bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'} \n                                            borderRadius=\"md\"\n                                            p={2}\n                                            textAlign=\"center\"\n                                        >\n                                            <Text fontSize=\"xl\">📄</Text>\n                                            <Text fontSize=\"xs\" isTruncated>{file.name}</Text>\n                                        </Box>\n                                    ))}\n                                {filteredMessages.filter(msg => msg.type === 'FILE_META').length === 0 && (\n                                    <Text fontSize=\"xs\" color=\"gray.500\">No media shared yet</Text>\n                                )}\n                            </Grid>\n                        </Box>\n\n                        {/* Smart suggestions */}\n                        {isAiInitialized && (\n                            <Box>\n                                <Heading size=\"sm\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>\n                                    Smart Suggestions\n                                </Heading>\n                                <VStack align=\"stretch\" spacing={2}>\n                                    {smartReplies.length > 0 ? (\n                                        smartReplies.map((reply, index) => (\n                                            <Button\n                                                key={index}\n                                                size=\"xs\"\n                                                variant=\"outline\"\n                                                colorScheme=\"blue\"\n                                                onClick={() => {\n                                                    setNewMessage(reply);\n                                                    // Focus the input after setting the message\n                                                    setTimeout(() => document.querySelector('input[placeholder=\"Type a message...\"]').focus(), 0);\n                                                }}\n                                            >\n                                                {reply}\n                                            </Button>\n                                        ))\n                                    ) : (\n                                        <Text fontSize=\"xs\" color=\"gray.500\">\n                                            AI will suggest replies based on conversation context\n                                        </Text>\n                                    )}\n                                </VStack>\n                            </Box>\n                        )}\n\n                        {/* Code snippets */}\n                        <Box>\n                            <Heading size=\"sm\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>\n                                Recent Code Snippets\n                            </Heading>\n                            {filteredMessages.filter(msg => msg.type === 'CODE_SHARE').length > 0 ? (\n                                filteredMessages\n                                    .filter(msg => msg.type === 'CODE_SHARE')\n                                    .slice(0, 2)\n                                    .map((snippet, index) => (\n                                        <Box \n                                            key={index}\n                                            bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'} \n                                            borderRadius=\"md\"\n                                            p={2}\n                                            mb={2}\n                                            fontSize=\"xs\"\n                                            cursor=\"pointer\"\n                                            onClick={() => setCodeEditor({\n                                                visible: true,\n                                                language: snippet.language,\n                                                code: snippet.code\n                                            })}\n                                        >\n                                            <Flex justifyContent=\"space-between\" mb={1}>\n                                                <Badge colorScheme=\"purple\">{snippet.language}</Badge>\n                                                <Text fontSize=\"xs\">{new Date(snippet.timestamp).toLocaleTimeString()}</Text>\n                                            </Flex>\n                                            <Box \n                                                bg={colorMode === 'dark' ? 'gray.600' : 'blue.100'} \n                                                p={1} \n                                                borderRadius=\"sm\"\n                                                fontFamily=\"monospace\"\n                                                noOfLines={3}\n                                            >\n                                                {snippet.code.substring(0, 100)}\n                                                {snippet.code.length > 100 && '...'}\n                                            </Box>\n                                        </Box>\n                                    ))\n                            ) : (\n                                <Text fontSize=\"xs\" color=\"gray.500\">No code snippets shared yet</Text>\n                            )}\n                        </Box>\n\n                        {/* Search messages */}\n                        <Box>\n                            <Heading size=\"sm\" mb={2} color={colorMode === 'dark' ? 'blue.200' : 'blue.600'}>\n                                Search Messages\n                            </Heading>\n                            <InputGroup size=\"sm\">\n                                <Input\n                                    placeholder=\"Search in conversation...\"\n                                    value={searchQuery}\n                                    onChange={(e) => setSearchQuery(e.target.value)}\n                                    bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'}\n                                    borderColor={colorMode === 'dark' ? 'gray.600' : 'blue.200'}\n                                    _focus={{ \n                                        borderColor: 'blue.400', \n                                        boxShadow: `0 0 0 1px ${colorMode === 'dark' ? 'blue.400' : 'blue.400'}`\n                                    }}\n                                />\n                                <InputRightElement>\n                                    {'🔍'}\n                                </InputRightElement>\n                            </InputGroup>\n                        </Box>\n\n                        {/* Coding Platforms Integration */}\n                        <CodingPlatformsTab />\n\n                    </VStack>\n                </Box>\n            </Flex>\n\n            {/* Message input */}\n            <Box \n                p={3} \n                bg={colorMode === 'dark' ? 'gray.800' : 'gray.50'} \n                borderTopWidth=\"1px\"\n                borderTopColor={colorMode === 'dark' ? 'gray.700' : 'gray.200'}\n            >\n                <Flex>\n                    <InputGroup size=\"md\">\n                        <Input\n                            placeholder=\"Type a message...\"\n                            value={newMessage}\n                            onChange={handleInputChange}\n                            onKeyPress={handleKeyPress}\n                            bg={colorMode === 'dark' ? 'gray.700' : 'blue.50'}\n                            borderColor={colorMode === 'dark' ? 'gray.600' : 'blue.200'}\n                            _focus={{ \n                                borderColor: 'blue.400', \n                                boxShadow: `0 0 0 1px ${colorMode === 'dark' ? 'blue.400' : 'blue.400'}`\n                            }}\n                            borderRadius=\"full\"\n                            pr=\"4.5rem\"\n                        />\n                        <InputRightElement width=\"4.5rem\">\n                            <Button \n                                h=\"1.75rem\" \n                                size=\"sm\" \n                                colorScheme=\"blue\"\n                                onClick={handleSendMessage}\n                                isDisabled={!newMessage.trim()}\n                                borderRadius=\"full\"\n                            >\n                                Send\n                            </Button>\n                        </InputRightElement>\n                    </InputGroup>\n                </Flex>\n                \n                {/* Message persistence toggle */}\n                <Flex justifyContent=\"flex-end\" mt={2}>\n                    <Button\n                        size=\"xs\"\n                        variant={persistenceEnabled ? \"solid\" : \"outline\"}\n                        colorScheme={persistenceEnabled ? \"green\" : \"gray\"}\n                        onClick={togglePersistence}\n                        borderRadius=\"full\"\n                    >\n                        {persistenceEnabled ? \"Persistence: On\" : \"Persistence: Off\"}\n                    </Button>\n                </Flex>\n            </Box>\n\n            {/* Modals with lazy loading */}\n            {renderAISettings()}\n            {renderProfileModal()}\n\n            {/* Connection status indicator */}\n            {connectionState !== 'connected' && (\n                <Box \n                    position=\"fixed\" \n                    bottom=\"4\" \n                    left=\"50%\" \n                    transform=\"translateX(-50%)\"\n                    bg={connectionState === 'reconnecting' ? 'yellow.500' : 'red.500'}\n                    color=\"white\"\n                    px={4}\n                    py={2}\n                    borderRadius=\"full\"\n                    boxShadow=\"md\"\n                >\n                    {connectionState === 'reconnecting' ? 'Reconnecting...' : 'Connection error. Working offline.'}\n                </Box>\n            )}\n\n            {/* Credits */}\n            <Box\n                position=\"fixed\"\n                bottom=\"2\"\n                right=\"2\"\n                fontSize=\"xs\"\n                color={colorMode === 'dark' ? 'gray.500' : 'gray.600'}\n                textAlign=\"right\"\n                zIndex=\"1\"\n            >\n                <Text>\n                    Enhanced by <Text as=\"span\" fontWeight=\"bold\">SREE VARSHAN V</Text>\n                </Text>\n                <Text>\n                    <a \n                        href=\"https://github.com/sreevarshan-xenoz\" \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        style={{ textDecoration: 'underline' }}\n                    >\n                        github.com/sreevarshan-xenoz\n                    </a>\n                </Text>\n            </Box>\n        </Flex>\n    );\n};\n\nexport default Chat;","import React from 'react';\r\nimport { Icon } from '@chakra-ui/react';\r\n\r\nexport const IconWrapper = ({ icon, size, color, mr, ml, ...props }) => {\r\n  return (\r\n    <Icon \r\n      as={icon} \r\n      boxSize={size} \r\n      color={color}\r\n      mr={mr}\r\n      ml={ml}\r\n      {...props}\r\n    />\r\n  );\r\n}; "],"names":["LazyAISettings","lazy","then","module","default","LazyProfile","LazyLeetCodeIntegration","LazyHackerRankIntegration","LazyMiniAIChat","LazyCodeExecutionPanel","LazyVoiceMessageRecorder","LazyCollaborativeWhiteboard","CodingPlatformsTab","tabIndex","setTabIndex","useState","isOpen","setIsOpen","borderColor","useColorModeValue","tabBg","activeTabBg","boxBg","LoadingFallback","_jsx","Box","p","textAlign","children","Spinner","size","color","_jsxs","bg","borderRadius","borderWidth","mb","Flex","align","borderBottomWidth","justifyContent","cursor","onClick","toggleOpen","IconWrapper","icon","FaCode","mr","Heading","FaChevronUp","FaChevronDown","Collapse","in","animateOpacity","Tabs","isFitted","variant","index","onChange","colorScheme","TabList","Tab","_selected","borderBottomColor","borderTopRadius","SiLeetcode","FaHackerrank","TabPanels","TabPanel","Suspense","fallback","MessageStatus","memo","_ref","status","timestamp","alignItems","fontSize","Text","getStatusColor","fontWeight","getStatusIcon","Date","toLocaleTimeString","MessageItem","_ref2","_message$reactions","message","onReaction","onRetry","onMarkAsRead","onDelete","isSent","sender","colorMode","useColorMode","useEffect","alignSelf","maxWidth","Card","boxShadow","CardBody","py","px","text","mt","offline","Badge","ml","reactions","map","reaction","Tag","TagLabel","HStack","spacing","Button","e","stopPropagation","_ref3","currentUser","selectedPeer","isAIChatActive","selectedAIModel","isAiInitialized","showSettings","setShowSettings","showTutorial","setShowTutorial","addNotification","theme","setTheme","navigate","useNavigate","toast","useToast","messages","setMessages","newMessage","setNewMessage","peers","setPeers","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","typingStatus","setTypingStatus","searchQuery","setSearchQuery","messagesEndRef","useRef","fileInputRef","smartReplies","setSmartReplies","messageCompletion","setMessageCompletion","sentiment","setSentiment","language","setLanguage","codeEditor","setCodeEditor","visible","code","sharedWorkspace","setSharedWorkspace","translatedMessages","setTranslatedMessages","Map","userLanguage","setUserLanguage","navigator","split","showProfileModal","setShowProfileModal","userProfile","setUserProfile","persistenceEnabled","setPersistenceEnabled","isLoadingHistory","setIsLoadingHistory","activeGroups","setActiveGroups","selectedGroup","setSelectedGroup","connectionState","setConnectionState","offlineMode","setOfflineMode","customEmojis","setCustomEmojis","emojiPickerVisible","setEmojiPickerVisible","selectedMessageForReaction","setSelectedMessageForReaction","voiceTranscriptionEnabled","setVoiceTranscriptionEnabled","collaborativeEditingEnabled","setCollaborativeEditingEnabled","messageEditHistory","setMessageEditHistory","showAISettings","setShowAISettings","useBasicChatbot","setUseBasicChatbot","settings","setSettings","notifications","enabled","sound","appearance","chat","enterToSend","readReceipts","ai","provider","apiKey","model","privacy","encryptMessages","autoDeleteMessages","basicChatbotResponses","getBasicChatbotResponse","lowercaseMessage","toLowerCase","trim","key","response","Object","entries","includes","handleRetry","prev","msg","id","success","webrtcService","sendMessage","error","handleMarkAsRead","sendReadReceipt","handleDeleteMessage","filter","type","messageId","toISOString","savedProfile","JSON","parse","localStorage","getItem","_currentUser$id","defaultProfile","displayName","substring","avatarUrl","handleProfileUpdate","profileData","handleReaction","emoji","reactionMessage","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","async","preventDefault","uuidv4","messageData","botResponse","isAI","aiService","handleHelpQuery","console","groupMessageData","groupId","filteredMessages","useMemo","className","direction","h","Avatar","name","fontStyle","Spacer","_hover","IconButton","flex","overflow","w","borderRightWidth","borderRightColor","overflowY","display","base","md","VStack","fontFamily","isTruncated","clipboard","writeText","title","duration","Input","placeholder","width","Divider","length","height","leftIcon","handleConnectWithPeers","showConnectionDialog","transform","transition","ref","borderLeftWidth","borderLeftColor","lg","onShareCode","handleShareCode","codeMessage","now","workspaceId","onSendVoiceMessage","transcribeAudio","audioBlob","onShareWhiteboard","blob","filename","reader","FileReader","readAsDataURL","onloadend","base64data","result","imageData","_fileInputRef$current","click","Grid","templateColumns","gap","slice","file","reply","setTimeout","document","querySelector","focus","snippet","noOfLines","InputGroup","value","target","_focus","InputRightElement","borderTopWidth","borderTopColor","onKeyPress","shiftKey","pr","isDisabled","togglePersistence","newValue","enablePersistence","onClose","onProfileUpdate","position","bottom","left","right","zIndex","as","href","rel","style","textDecoration","props","Icon","boxSize"],"sourceRoot":""}