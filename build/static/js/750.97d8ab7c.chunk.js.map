{"version":3,"file":"static/js/750.97d8ab7c.chunk.js","mappings":"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","sources":["components/LeetCodeIntegration.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Heading, \r\n  Text, \r\n  Button, \r\n  Input, \r\n  Flex, \r\n  VStack, \r\n  HStack, \r\n  useColorModeValue, \r\n  useToast,\r\n  Badge,\r\n  Link,\r\n  Select,\r\n  Tooltip\r\n} from '@chakra-ui/react';\r\nimport { FaCheck, FaTrophy, FaShare, FaCode, FaCalendarAlt, FaStar } from 'react-icons/fa';\r\nimport { IconWrapper } from '../utils/IconWrapper';\r\n\r\nconst LeetCodeIntegration = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [problemId, setProblemId] = useState('');\r\n  const [savedProfile, setSavedProfile] = useState(localStorage.getItem('leetcodeProfile') || '');\r\n  const [recentProblems, setRecentProblems] = useState([\r\n    { id: 1, title: 'Two Sum', difficulty: 'Easy', completed: true },\r\n    { id: 217, title: 'Contains Duplicate', difficulty: 'Easy', completed: true },\r\n    { id: 53, title: 'Maximum Subarray', difficulty: 'Medium', completed: false },\r\n    { id: 121, title: 'Best Time to Buy and Sell Stock', difficulty: 'Easy', completed: true }\r\n  ]);\r\n  const [dailyChallenge, setDailyChallenge] = useState({ \r\n    id: 2864, \r\n    title: 'Maximum Odd Binary Number', \r\n    difficulty: 'Easy',\r\n    description: 'You are given a binary string s that contains at least one \"1\"...'\r\n  });\r\n  \r\n  const toast = useToast();\r\n  const bgColor = useColorModeValue('blue.50', 'gray.700');\r\n  const cardBgColor = useColorModeValue('white', 'gray.800');\r\n  const borderColor = useColorModeValue('blue.200', 'gray.600');\r\n\r\n  useEffect(() => {\r\n    // Simulating loading user profile\r\n    if (savedProfile) {\r\n      setUsername(savedProfile);\r\n    }\r\n  }, [savedProfile]);\r\n\r\n  const saveProfile = () => {\r\n    if (username.trim()) {\r\n      localStorage.setItem('leetcodeProfile', username);\r\n      setSavedProfile(username);\r\n      toast({\r\n        title: 'Profile Saved',\r\n        description: `Your LeetCode profile \"${username}\" has been saved.`,\r\n        status: 'success',\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const shareProblem = () => {\r\n    if (problemId.trim()) {\r\n      const messageText = `Check out this LeetCode problem: https://leetcode.com/problems/${problemId}/`;\r\n      // In a real implementation, this would share to the current chat\r\n      navigator.clipboard.writeText(messageText);\r\n      toast({\r\n        title: 'Problem Shared',\r\n        description: 'Problem link copied to clipboard.',\r\n        status: 'success',\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: 'Input Required',\r\n        description: 'Please enter a problem ID or title.',\r\n        status: 'warning',\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const shareDailyChallenge = () => {\r\n    const messageText = `Today's LeetCode Daily Challenge: \"${dailyChallenge.title}\" (${dailyChallenge.difficulty}) - https://leetcode.com/problems/${dailyChallenge.title.toLowerCase().replace(/\\s+/g, '-')}/`;\r\n    navigator.clipboard.writeText(messageText);\r\n    toast({\r\n      title: 'Daily Challenge Shared',\r\n      description: 'Daily challenge link copied to clipboard.',\r\n      status: 'success',\r\n      duration: 3000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  const getColorScheme = (difficulty) => {\r\n    switch (difficulty) {\r\n      case 'Easy': return 'green';\r\n      case 'Medium': return 'orange';\r\n      case 'Hard': return 'red';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box p={4} bg={bgColor} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n      <Heading size=\"md\" mb={4}>LeetCode Integration</Heading>\r\n      \r\n      {!savedProfile ? (\r\n        <VStack spacing={3} align=\"stretch\" mb={4}>\r\n          <Text fontSize=\"sm\">Connect your LeetCode profile to share problems and track progress</Text>\r\n          <Input \r\n            placeholder=\"LeetCode Username\" \r\n            value={username} \r\n            onChange={(e) => setUsername(e.target.value)}\r\n            size=\"sm\"\r\n          />\r\n          <Button size=\"sm\" colorScheme=\"blue\" onClick={saveProfile}>\r\n            <HStack>\r\n              <IconWrapper icon={FaCheck} size={14} />\r\n              <Text>Save Profile</Text>\r\n            </HStack>\r\n          </Button>\r\n        </VStack>\r\n      ) : (\r\n        <VStack spacing={4} align=\"stretch\">\r\n          <Flex justify=\"space-between\" align=\"center\">\r\n            <Text fontWeight=\"bold\">{savedProfile}</Text>\r\n            <Tooltip label=\"Edit Profile\">\r\n              <Button size=\"xs\" variant=\"ghost\" onClick={() => setSavedProfile('')}>\r\n                Edit\r\n              </Button>\r\n            </Tooltip>\r\n          </Flex>\r\n          \r\n          <Box bg={cardBgColor} p={3} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n            <Heading size=\"xs\" mb={2}>Share Problem</Heading>\r\n            <HStack>\r\n              <Input \r\n                placeholder=\"Problem ID or title\" \r\n                size=\"sm\" \r\n                value={problemId} \r\n                onChange={(e) => setProblemId(e.target.value)}\r\n              />\r\n              <Button size=\"sm\" colorScheme=\"blue\" onClick={shareProblem}>\r\n                <IconWrapper icon={FaShare} size={14} />\r\n              </Button>\r\n            </HStack>\r\n          </Box>\r\n          \r\n          <Box bg={cardBgColor} p={3} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n            <Heading size=\"xs\" mb={2}>Daily Challenge</Heading>\r\n            <Flex justify=\"space-between\" align=\"center\">\r\n              <VStack align=\"start\" spacing={1}>\r\n                <Text fontSize=\"sm\" fontWeight=\"bold\">{dailyChallenge.title}</Text>\r\n                <Badge colorScheme={getColorScheme(dailyChallenge.difficulty)}>\r\n                  {dailyChallenge.difficulty}\r\n                </Badge>\r\n              </VStack>\r\n              <Button size=\"sm\" colorScheme=\"blue\" onClick={shareDailyChallenge}>\r\n                <HStack>\r\n                  <IconWrapper icon={FaCalendarAlt} size={14} />\r\n                  <Text>Share</Text>\r\n                </HStack>\r\n              </Button>\r\n            </Flex>\r\n          </Box>\r\n          \r\n          <Box bg={cardBgColor} p={3} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n            <Heading size=\"xs\" mb={3}>Recent Problems</Heading>\r\n            <VStack spacing={2} align=\"stretch\">\r\n              {recentProblems.map(problem => (\r\n                <Flex key={problem.id} justify=\"space-between\" align=\"center\">\r\n                  <HStack>\r\n                    {problem.completed && (\r\n                      <IconWrapper icon={FaCheck} color=\"green.500\" size={12} />\r\n                    )}\r\n                    <Text fontSize=\"sm\">{problem.title}</Text>\r\n                    <Badge size=\"sm\" colorScheme={getColorScheme(problem.difficulty)}>\r\n                      {problem.difficulty}\r\n                    </Badge>\r\n                  </HStack>\r\n                  <Button \r\n                    size=\"xs\" \r\n                    variant=\"ghost\"\r\n                    onClick={() => {\r\n                      setProblemId(problem.title.toLowerCase().replace(/\\s+/g, '-'));\r\n                    }}\r\n                  >\r\n                    <IconWrapper icon={FaShare} size={12} />\r\n                  </Button>\r\n                </Flex>\r\n              ))}\r\n            </VStack>\r\n          </Box>\r\n        </VStack>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LeetCodeIntegration; "],"names":["LeetCodeIntegration","username","setUsername","useState","problemId","setProblemId","savedProfile","setSavedProfile","localStorage","getItem","recentProblems","setRecentProblems","id","title","difficulty","completed","dailyChallenge","setDailyChallenge","description","toast","useToast","bgColor","useColorModeValue","cardBgColor","borderColor","useEffect","getColorScheme","_jsxs","Box","p","bg","borderRadius","borderWidth","children","_jsx","Heading","size","mb","VStack","spacing","align","Flex","justify","Text","fontWeight","Tooltip","label","Button","variant","onClick","HStack","Input","placeholder","value","onChange","e","target","colorScheme","shareProblem","trim","messageText","navigator","clipboard","writeText","status","duration","isClosable","IconWrapper","icon","FaShare","fontSize","Badge","shareDailyChallenge","toLowerCase","replace","FaCalendarAlt","map","problem","FaCheck","color","saveProfile","setItem"],"sourceRoot":""}