{"version":3,"file":"static/js/795.c572b481.chunk.js","mappings":"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","sources":["components/CollaborativeWhiteboard.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  IconButton,\r\n  useColorModeValue,\r\n  Heading,\r\n  Collapse,\r\n  HStack,\r\n  Tooltip,\r\n  ButtonGroup,\r\n  Slider,\r\n  SliderTrack,\r\n  SliderFilledTrack,\r\n  SliderThumb,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  SimpleGrid,\r\n  useDisclosure,\r\n  Text\r\n} from '@chakra-ui/react';\r\nimport { \r\n  FaPencilAlt, \r\n  FaEraser, \r\n  FaTrash, \r\n  FaChevronDown, \r\n  FaChevronUp, \r\n  FaSave,\r\n  FaShareSquare,\r\n  FaCircle,\r\n  FaSquare,\r\n  FaArrowsAlt,\r\n  FaUndo,\r\n  FaRedo\r\n} from 'react-icons/fa';\r\nimport { IconWrapper } from '../utils/IconWrapper';\r\n\r\nconst CollaborativeWhiteboard = ({ onShareWhiteboard }) => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [tool, setTool] = useState('pencil');\r\n  const [color, setColor] = useState('#000000');\r\n  const [brushSize, setBrushSize] = useState(3);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [undoStack, setUndoStack] = useState([]);\r\n  const [redoStack, setRedoStack] = useState([]);\r\n  \r\n  const canvasRef = useRef(null);\r\n  const contextRef = useRef(null);\r\n  const startPointRef = useRef(null);\r\n  \r\n  const { isOpen: isColorPickerOpen, onToggle: onColorPickerToggle, onClose: onColorPickerClose } = useDisclosure();\r\n  \r\n  const bgColor = useColorModeValue('gray.50', 'gray.800');\r\n  const headerBgColor = useColorModeValue('blue.50', 'gray.700');\r\n  const borderColor = useColorModeValue('blue.200', 'gray.600');\r\n  const canvasBgColor = useColorModeValue('white', 'gray.700');\r\n  \r\n  const colors = [\r\n    '#000000', '#FFFFFF', '#FF0000', '#00FF00', '#0000FF', \r\n    '#FFFF00', '#FF00FF', '#00FFFF', '#FFA500', '#800080'\r\n  ];\r\n  \r\n  const toggleOpen = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  \r\n  // Initialize canvas\r\n  useEffect(() => {\r\n    if (!isOpen) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    \r\n    // Set canvas dimensions\r\n    canvas.width = canvas.offsetWidth * 2;\r\n    canvas.height = canvas.offsetHeight * 2;\r\n    canvas.style.width = `${canvas.offsetWidth}px`;\r\n    canvas.style.height = `${canvas.offsetHeight}px`;\r\n    \r\n    // Get context and set default styles\r\n    const context = canvas.getContext('2d');\r\n    context.scale(2, 2);\r\n    context.lineCap = 'round';\r\n    context.lineJoin = 'round';\r\n    context.strokeStyle = color;\r\n    context.lineWidth = brushSize;\r\n    contextRef.current = context;\r\n    \r\n    // Save initial state for undo\r\n    saveCanvasState();\r\n  }, [isOpen]);\r\n  \r\n  // Update context when color or brush size changes\r\n  useEffect(() => {\r\n    if (contextRef.current) {\r\n      contextRef.current.strokeStyle = color;\r\n      contextRef.current.lineWidth = brushSize;\r\n    }\r\n  }, [color, brushSize]);\r\n  \r\n  // Handle window resize\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (!canvasRef.current || !contextRef.current) return;\r\n      \r\n      // Save current drawing\r\n      const tempCanvas = document.createElement('canvas');\r\n      const tempContext = tempCanvas.getContext('2d');\r\n      tempCanvas.width = canvasRef.current.width;\r\n      tempCanvas.height = canvasRef.current.height;\r\n      tempContext.drawImage(canvasRef.current, 0, 0);\r\n      \r\n      // Resize canvas\r\n      canvasRef.current.width = canvasRef.current.offsetWidth * 2;\r\n      canvasRef.current.height = canvasRef.current.offsetHeight * 2;\r\n      canvasRef.current.style.width = `${canvasRef.current.offsetWidth}px`;\r\n      canvasRef.current.style.height = `${canvasRef.current.offsetHeight}px`;\r\n      \r\n      // Restore context settings\r\n      contextRef.current.scale(2, 2);\r\n      contextRef.current.lineCap = 'round';\r\n      contextRef.current.lineJoin = 'round';\r\n      contextRef.current.strokeStyle = color;\r\n      contextRef.current.lineWidth = brushSize;\r\n      \r\n      // Restore drawing\r\n      contextRef.current.drawImage(tempCanvas, 0, 0);\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [color, brushSize]);\r\n  \r\n  const saveCanvasState = () => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const imageData = canvas.toDataURL('image/png');\r\n    \r\n    setUndoStack(prev => [...prev, imageData]);\r\n    // Clear redo stack when a new action is performed\r\n    setRedoStack([]);\r\n  };\r\n  \r\n  const startDrawing = ({ nativeEvent }) => {\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    \r\n    if (tool === 'pencil' || tool === 'eraser') {\r\n      contextRef.current.beginPath();\r\n      contextRef.current.moveTo(offsetX, offsetY);\r\n      setIsDrawing(true);\r\n    } else if (tool === 'circle' || tool === 'rectangle') {\r\n      startPointRef.current = { x: offsetX, y: offsetY };\r\n      setIsDrawing(true);\r\n    }\r\n  };\r\n  \r\n  const draw = ({ nativeEvent }) => {\r\n    if (!isDrawing) return;\r\n    \r\n    const { offsetX, offsetY } = nativeEvent;\r\n    \r\n    if (tool === 'pencil') {\r\n      contextRef.current.lineTo(offsetX, offsetY);\r\n      contextRef.current.stroke();\r\n    } else if (tool === 'eraser') {\r\n      const prevColor = contextRef.current.strokeStyle;\r\n      contextRef.current.strokeStyle = canvasBgColor;\r\n      contextRef.current.lineTo(offsetX, offsetY);\r\n      contextRef.current.stroke();\r\n      contextRef.current.strokeStyle = prevColor;\r\n    } else if (tool === 'circle' || tool === 'rectangle') {\r\n      // For shapes, we'll redraw on mouse move to show preview\r\n      const canvas = canvasRef.current;\r\n      const context = contextRef.current;\r\n      \r\n      // Restore previous state to clear the preview\r\n      if (undoStack.length > 0) {\r\n        const img = new Image();\r\n        img.src = undoStack[undoStack.length - 1];\r\n        img.onload = () => {\r\n          context.clearRect(0, 0, canvas.width / 2, canvas.height / 2);\r\n          context.drawImage(img, 0, 0, canvas.width / 2, canvas.height / 2);\r\n          \r\n          // Draw new preview\r\n          const startPoint = startPointRef.current;\r\n          \r\n          if (tool === 'circle') {\r\n            const radius = Math.sqrt(\r\n              Math.pow(offsetX - startPoint.x, 2) + Math.pow(offsetY - startPoint.y, 2)\r\n            );\r\n            context.beginPath();\r\n            context.arc(startPoint.x, startPoint.y, radius, 0, 2 * Math.PI);\r\n            context.stroke();\r\n          } else if (tool === 'rectangle') {\r\n            context.beginPath();\r\n            context.rect(\r\n              startPoint.x,\r\n              startPoint.y,\r\n              offsetX - startPoint.x,\r\n              offsetY - startPoint.y\r\n            );\r\n            context.stroke();\r\n          }\r\n        };\r\n      }\r\n    }\r\n  };\r\n  \r\n  const finishDrawing = () => {\r\n    if (!isDrawing) return;\r\n    \r\n    if (tool === 'pencil' || tool === 'eraser') {\r\n      contextRef.current.closePath();\r\n    } else if (tool === 'circle' || tool === 'rectangle') {\r\n      // The final shape is already drawn in the draw function\r\n    }\r\n    \r\n    setIsDrawing(false);\r\n    saveCanvasState();\r\n  };\r\n  \r\n  const clearCanvas = () => {\r\n    const canvas = canvasRef.current;\r\n    const context = contextRef.current;\r\n    \r\n    saveCanvasState();\r\n    context.clearRect(0, 0, canvas.width / 2, canvas.height / 2);\r\n  };\r\n  \r\n  const undo = () => {\r\n    if (undoStack.length <= 1) return;\r\n    \r\n    // Move current state to redo stack\r\n    const currentState = undoStack.pop();\r\n    setRedoStack(prev => [...prev, currentState]);\r\n    \r\n    // Apply previous state\r\n    const previousState = undoStack[undoStack.length - 1];\r\n    const img = new Image();\r\n    img.src = previousState;\r\n    img.onload = () => {\r\n      const canvas = canvasRef.current;\r\n      const context = contextRef.current;\r\n      context.clearRect(0, 0, canvas.width / 2, canvas.height / 2);\r\n      context.drawImage(img, 0, 0, canvas.width / 2, canvas.height / 2);\r\n    };\r\n    \r\n    // Update state\r\n    setUndoStack([...undoStack]);\r\n  };\r\n  \r\n  const redo = () => {\r\n    if (redoStack.length === 0) return;\r\n    \r\n    // Get the last state from redo stack\r\n    const stateToRestore = redoStack.pop();\r\n    \r\n    // Apply the state\r\n    const img = new Image();\r\n    img.src = stateToRestore;\r\n    img.onload = () => {\r\n      const canvas = canvasRef.current;\r\n      const context = contextRef.current;\r\n      context.clearRect(0, 0, canvas.width / 2, canvas.height / 2);\r\n      context.drawImage(img, 0, 0, canvas.width / 2, canvas.height / 2);\r\n    };\r\n    \r\n    // Update states\r\n    setUndoStack(prev => [...prev, stateToRestore]);\r\n    setRedoStack([...redoStack]);\r\n  };\r\n  \r\n  const shareWhiteboard = () => {\r\n    if (canvasRef.current && onShareWhiteboard) {\r\n      canvasRef.current.toBlob((blob) => {\r\n        onShareWhiteboard(blob, 'whiteboard.png');\r\n      });\r\n    }\r\n  };\r\n  \r\n  const downloadWhiteboard = () => {\r\n    if (canvasRef.current) {\r\n      const link = document.createElement('a');\r\n      link.download = 'whiteboard.png';\r\n      link.href = canvasRef.current.toDataURL('image/png');\r\n      link.click();\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Box\r\n      bg={bgColor}\r\n      borderRadius=\"md\"\r\n      borderWidth=\"1px\"\r\n      borderColor={borderColor}\r\n      mb={4}\r\n      overflow=\"hidden\"\r\n    >\r\n      <Flex\r\n        align=\"center\"\r\n        p={2}\r\n        bg={headerBgColor}\r\n        borderBottomWidth={isOpen ? \"1px\" : \"0\"}\r\n        borderColor={borderColor}\r\n        justifyContent=\"space-between\"\r\n        cursor=\"pointer\"\r\n        onClick={toggleOpen}\r\n      >\r\n        <HStack>\r\n          <IconWrapper icon={FaPencilAlt} size={14} mr={2} />\r\n          <Heading size=\"xs\">Whiteboard</Heading>\r\n        </HStack>\r\n        <IconWrapper\r\n          icon={isOpen ? FaChevronUp : FaChevronDown}\r\n          size={12}\r\n        />\r\n      </Flex>\r\n      \r\n      <Collapse in={isOpen} animateOpacity>\r\n        <Box p={3}>\r\n          <Flex mb={2} gap={1}>\r\n            <ButtonGroup size=\"xs\" isAttached variant=\"outline\">\r\n              <Tooltip label=\"Pencil\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaPencilAlt} />}\r\n                  colorScheme={tool === 'pencil' ? 'blue' : 'gray'}\r\n                  onClick={() => setTool('pencil')}\r\n                  aria-label=\"Pencil tool\"\r\n                />\r\n              </Tooltip>\r\n              <Tooltip label=\"Eraser\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaEraser} />}\r\n                  colorScheme={tool === 'eraser' ? 'blue' : 'gray'}\r\n                  onClick={() => setTool('eraser')}\r\n                  aria-label=\"Eraser tool\"\r\n                />\r\n              </Tooltip>\r\n              <Tooltip label=\"Circle\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaCircle} />}\r\n                  colorScheme={tool === 'circle' ? 'blue' : 'gray'}\r\n                  onClick={() => setTool('circle')}\r\n                  aria-label=\"Circle tool\"\r\n                />\r\n              </Tooltip>\r\n              <Tooltip label=\"Rectangle\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaSquare} />}\r\n                  colorScheme={tool === 'rectangle' ? 'blue' : 'gray'}\r\n                  onClick={() => setTool('rectangle')}\r\n                  aria-label=\"Rectangle tool\"\r\n                />\r\n              </Tooltip>\r\n            </ButtonGroup>\r\n            \r\n            <Popover\r\n              isOpen={isColorPickerOpen}\r\n              onClose={onColorPickerClose}\r\n              placement=\"bottom\"\r\n              closeOnBlur={true}\r\n            >\r\n              <PopoverTrigger>\r\n                <IconButton\r\n                  size=\"xs\"\r\n                  icon={\r\n                    <Box \r\n                      w=\"14px\" \r\n                      h=\"14px\" \r\n                      borderRadius=\"sm\" \r\n                      bg={color}\r\n                      borderWidth=\"1px\"\r\n                      borderColor=\"gray.300\"\r\n                    />\r\n                  }\r\n                  onClick={onColorPickerToggle}\r\n                  aria-label=\"Color picker\"\r\n                />\r\n              </PopoverTrigger>\r\n              <PopoverContent width=\"auto\" p={2}>\r\n                <PopoverArrow />\r\n                <PopoverBody p={2}>\r\n                  <SimpleGrid columns={5} spacing={2}>\r\n                    {colors.map((c) => (\r\n                      <Box\r\n                        key={c}\r\n                        w=\"20px\"\r\n                        h=\"20px\"\r\n                        borderRadius=\"sm\"\r\n                        bg={c}\r\n                        borderWidth=\"1px\"\r\n                        borderColor=\"gray.300\"\r\n                        cursor=\"pointer\"\r\n                        onClick={() => {\r\n                          setColor(c);\r\n                          onColorPickerClose();\r\n                        }}\r\n                        _hover={{ transform: 'scale(1.1)' }}\r\n                      />\r\n                    ))}\r\n                  </SimpleGrid>\r\n                </PopoverBody>\r\n              </PopoverContent>\r\n            </Popover>\r\n            \r\n            <Box flex=\"1\" px={2}>\r\n              <Slider\r\n                aria-label=\"brush-size\"\r\n                defaultValue={3}\r\n                min={1}\r\n                max={20}\r\n                step={1}\r\n                onChange={setBrushSize}\r\n                colorScheme=\"blue\"\r\n                size=\"sm\"\r\n              >\r\n                <SliderTrack>\r\n                  <SliderFilledTrack />\r\n                </SliderTrack>\r\n                <SliderThumb boxSize={3} />\r\n              </Slider>\r\n            </Box>\r\n            \r\n            <ButtonGroup size=\"xs\" isAttached variant=\"outline\">\r\n              <Tooltip label=\"Undo\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaUndo} />}\r\n                  onClick={undo}\r\n                  isDisabled={undoStack.length <= 1}\r\n                  aria-label=\"Undo\"\r\n                />\r\n              </Tooltip>\r\n              <Tooltip label=\"Redo\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaRedo} />}\r\n                  onClick={redo}\r\n                  isDisabled={redoStack.length === 0}\r\n                  aria-label=\"Redo\"\r\n                />\r\n              </Tooltip>\r\n              <Tooltip label=\"Clear\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaTrash} />}\r\n                  onClick={clearCanvas}\r\n                  aria-label=\"Clear canvas\"\r\n                />\r\n              </Tooltip>\r\n            </ButtonGroup>\r\n          </Flex>\r\n          \r\n          <Box\r\n            position=\"relative\"\r\n            borderWidth=\"1px\"\r\n            borderColor={borderColor}\r\n            borderRadius=\"md\"\r\n            overflow=\"hidden\"\r\n            height=\"200px\"\r\n          >\r\n            <canvas\r\n              ref={canvasRef}\r\n              style={{\r\n                width: '100%',\r\n                height: '100%',\r\n                backgroundColor: canvasBgColor,\r\n                cursor: tool === 'pencil' ? 'crosshair' : tool === 'eraser' ? 'cell' : 'crosshair'\r\n              }}\r\n              onMouseDown={startDrawing}\r\n              onMouseMove={draw}\r\n              onMouseUp={finishDrawing}\r\n              onMouseLeave={finishDrawing}\r\n            />\r\n          </Box>\r\n          \r\n          <Flex mt={2} justifyContent=\"space-between\">\r\n            <Text fontSize=\"xs\" color=\"gray.500\">\r\n              {tool === 'pencil' ? 'Drawing' : \r\n               tool === 'eraser' ? 'Erasing' : \r\n               tool === 'circle' ? 'Drawing circle' : 'Drawing rectangle'}\r\n            </Text>\r\n            <ButtonGroup size=\"xs\" isAttached>\r\n              <Tooltip label=\"Save\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaSave} />}\r\n                  onClick={downloadWhiteboard}\r\n                  aria-label=\"Save whiteboard\"\r\n                />\r\n              </Tooltip>\r\n              <Tooltip label=\"Share\">\r\n                <IconButton\r\n                  icon={<IconWrapper icon={FaShareSquare} />}\r\n                  onClick={shareWhiteboard}\r\n                  aria-label=\"Share whiteboard\"\r\n                />\r\n              </Tooltip>\r\n            </ButtonGroup>\r\n          </Flex>\r\n        </Box>\r\n      </Collapse>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CollaborativeWhiteboard; "],"names":["_ref","onShareWhiteboard","isOpen","setIsOpen","useState","tool","setTool","color","setColor","brushSize","setBrushSize","isDrawing","setIsDrawing","undoStack","setUndoStack","redoStack","setRedoStack","canvasRef","useRef","contextRef","startPointRef","isColorPickerOpen","onToggle","onColorPickerToggle","onClose","onColorPickerClose","useDisclosure","bgColor","useColorModeValue","headerBgColor","borderColor","canvasBgColor","useEffect","canvas","current","width","offsetWidth","height","offsetHeight","style","context","getContext","scale","lineCap","lineJoin","strokeStyle","lineWidth","saveCanvasState","handleResize","tempCanvas","document","createElement","tempContext","drawImage","window","addEventListener","removeEventListener","imageData","toDataURL","prev","finishDrawing","closePath","_jsxs","Box","bg","borderRadius","borderWidth","mb","overflow","children","Flex","align","p","borderBottomWidth","justifyContent","cursor","onClick","toggleOpen","HStack","_jsx","IconWrapper","icon","FaPencilAlt","size","mr","Heading","FaChevronUp","FaChevronDown","Collapse","in","animateOpacity","gap","ButtonGroup","isAttached","variant","Tooltip","label","IconButton","colorScheme","FaEraser","FaCircle","FaSquare","Popover","placement","closeOnBlur","PopoverTrigger","w","h","PopoverContent","PopoverArrow","PopoverBody","SimpleGrid","columns","spacing","map","c","_hover","transform","flex","px","Slider","defaultValue","min","max","step","onChange","SliderTrack","SliderFilledTrack","SliderThumb","boxSize","FaUndo","undo","length","currentState","pop","previousState","img","Image","src","onload","clearRect","isDisabled","FaRedo","redo","stateToRestore","FaTrash","clearCanvas","position","ref","backgroundColor","onMouseDown","_ref2","nativeEvent","offsetX","offsetY","beginPath","moveTo","x","y","onMouseMove","_ref3","lineTo","stroke","prevColor","startPoint","radius","Math","sqrt","pow","arc","PI","rect","onMouseUp","onMouseLeave","mt","Text","fontSize","FaSave","downloadWhiteboard","link","download","href","click","FaShareSquare","shareWhiteboard","toBlob","blob"],"sourceRoot":""}