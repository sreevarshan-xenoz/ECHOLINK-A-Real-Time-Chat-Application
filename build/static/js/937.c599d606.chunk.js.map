{"version":3,"file":"static/js/937.c599d606.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/react/dist/esm/select/select-field.mjs","../node_modules/@chakra-ui/react/dist/esm/select/select.mjs","../node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/esm/split.mjs","../node_modules/@chakra-ui/react/dist/esm/textarea/textarea.mjs","../node_modules/@chakra-ui/react/dist/esm/code/code.mjs","components/CodeExecutionPanel.js"],"sourcesContent":["'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst SelectField = forwardRef(\n  function SelectField2(props, ref) {\n    const { children, placeholder, className, ...rest } = props;\n    return /* @__PURE__ */ jsxs(\n      chakra.select,\n      {\n        ...rest,\n        ref,\n        className: cx(\"chakra-select\", className),\n        children: [\n          placeholder && /* @__PURE__ */ jsx(\"option\", { value: \"\", children: placeholder }),\n          children\n        ]\n      }\n    );\n  }\n);\nSelectField.displayName = \"SelectField\";\n\nexport { SelectField };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { omitThemingProps, layoutPropNames } from '@chakra-ui/styled-system';\nimport { split, dataAttr } from '@chakra-ui/utils';\nimport { cloneElement, isValidElement } from 'react';\nimport { SelectField } from './select-field.mjs';\nimport { useFormControl } from '../form-control/use-form-control.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\n\nconst Select = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props);\n  const [layoutProps, otherProps] = split(rest, layoutPropNames);\n  const ownProps = useFormControl(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...styles.field?.[\"_focus\"]\n    }\n  };\n  return /* @__PURE__ */ jsxs(\n    chakra.div,\n    {\n      className: \"chakra-select__wrapper\",\n      __css: rootStyles,\n      ...layoutProps,\n      ...rootProps,\n      children: [\n        /* @__PURE__ */ jsx(\n          SelectField,\n          {\n            ref,\n            height: h ?? height,\n            minH: minH ?? minHeight,\n            placeholder,\n            ...ownProps,\n            __css: fieldStyles,\n            children: props.children\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          SelectIcon,\n          {\n            \"data-disabled\": dataAttr(ownProps.disabled),\n            ...(iconColor || color) && { color: iconColor || color },\n            __css: styles.icon,\n            ...iconSize && { fontSize: iconSize },\n            children: icon\n          }\n        )\n      ]\n    }\n  );\n});\nSelect.displayName = \"Select\";\nconst DefaultIcon = (props) => /* @__PURE__ */ jsx(\"svg\", { viewBox: \"0 0 24 24\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }\n) });\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nconst SelectIcon = (props) => {\n  const { children = /* @__PURE__ */ jsx(DefaultIcon, {}), ...rest } = props;\n  const clone = cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */ jsx(IconWrapper, { ...rest, className: \"chakra-select__icon-wrapper\", children: isValidElement(children) ? clone : null });\n};\nSelectIcon.displayName = \"SelectIcon\";\n\nexport { DefaultIcon, Select };\n","function split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key))\n      picked[key] = value;\n    else\n      omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\nexport { split };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { omit, cx } from '@chakra-ui/utils';\nimport { useFormControl } from '../form-control/use-form-control.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nconst Textarea = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props);\n  const { className, rows, ...rest } = omitThemingProps(props);\n  const textareaProps = useFormControl(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */ jsx(\n    chakra.textarea,\n    {\n      ref,\n      rows,\n      ...textareaProps,\n      className: cx(\"chakra-textarea\", className),\n      __css: textareaStyles\n    }\n  );\n});\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { cx } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Code = forwardRef(function Code2(props, ref) {\n  const styles = useStyleConfig(\"Code\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.code,\n    {\n      ref,\n      className: cx(\"chakra-code\", props.className),\n      ...rest,\n      __css: {\n        display: \"inline-block\",\n        ...styles\n      }\n    }\n  );\n});\nCode.displayName = \"Code\";\n\nexport { Code };\n","import React, { useState, useRef } from 'react';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Text,\r\n  Button,\r\n  Select,\r\n  Textarea,\r\n  useColorModeValue,\r\n  Heading,\r\n  Collapse,\r\n  HStack,\r\n  VStack,\r\n  Spinner,\r\n  IconButton,\r\n  Badge,\r\n  Code\r\n} from '@chakra-ui/react';\r\nimport { FaCode, FaPlay, FaChevronDown, FaChevronUp, FaTrash, FaSave } from 'react-icons/fa';\r\nimport { IconWrapper } from '../utils/IconWrapper';\r\n\r\n// Mock code execution - in a real implementation, this would call an API\r\nconst executeCode = (code, language) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // Simple mock responses based on language and code\r\n      if (language === 'javascript') {\r\n        if (code.includes('console.log')) {\r\n          resolve({ success: true, output: `> ${code.match(/console\\.log\\(['\"](.*)['\"]\\)/)?.[1] || 'Hello, World!'}` });\r\n        } else if (code.includes('function')) {\r\n          resolve({ success: true, output: '> Function defined successfully' });\r\n        } else {\r\n          resolve({ success: true, output: '> Executed successfully' });\r\n        }\r\n      } else if (language === 'python') {\r\n        if (code.includes('print')) {\r\n          resolve({ success: true, output: `> ${code.match(/print\\(['\"](.*)['\"]\\)/)?.[1] || 'Hello, World!'}` });\r\n        } else if (code.includes('def')) {\r\n          resolve({ success: true, output: '> Function defined successfully' });\r\n        } else {\r\n          resolve({ success: true, output: '> Executed successfully' });\r\n        }\r\n      } else {\r\n        resolve({ success: true, output: '> Code executed successfully' });\r\n      }\r\n    }, 1500);\r\n  });\r\n};\r\n\r\nconst CodeExecutionPanel = ({ onShareCode }) => {\r\n  const [code, setCode] = useState('// Write your code here\\nconsole.log(\"Hello, World!\");');\r\n  const [language, setLanguage] = useState('javascript');\r\n  const [output, setOutput] = useState('');\r\n  const [isExecuting, setIsExecuting] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [execHistory, setExecHistory] = useState([]);\r\n  const textareaRef = useRef(null);\r\n  \r\n  const bgColor = useColorModeValue('gray.50', 'gray.800');\r\n  const headerBgColor = useColorModeValue('blue.50', 'gray.700');\r\n  const borderColor = useColorModeValue('blue.200', 'gray.600');\r\n  const codeBgColor = useColorModeValue('white', 'gray.700');\r\n  const outputBgColor = useColorModeValue('gray.100', 'gray.900');\r\n  const hoverBgColor = useColorModeValue('gray.100', 'gray.700');\r\n  \r\n  const toggleOpen = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  \r\n  const handleLanguageChange = (e) => {\r\n    const newLang = e.target.value;\r\n    setLanguage(newLang);\r\n    \r\n    // Update code template based on language\r\n    if (newLang === 'javascript') {\r\n      setCode('// Write your code here\\nconsole.log(\"Hello, World!\");');\r\n    } else if (newLang === 'python') {\r\n      setCode('# Write your code here\\nprint(\"Hello, World!\")');\r\n    } else if (newLang === 'java') {\r\n      setCode('// Write your code here\\nSystem.out.println(\"Hello, World!\");');\r\n    }\r\n  };\r\n  \r\n  const handleExecute = async () => {\r\n    if (!code.trim()) return;\r\n    \r\n    setIsExecuting(true);\r\n    setOutput('');\r\n    \r\n    try {\r\n      const result = await executeCode(code, language);\r\n      \r\n      setOutput(result.output);\r\n      \r\n      // Add to history\r\n      const historyItem = {\r\n        id: Date.now(),\r\n        code: code,\r\n        language: language,\r\n        output: result.output,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      setExecHistory(prev => [historyItem, ...prev].slice(0, 5));\r\n    } catch (error) {\r\n      setOutput(`Error: ${error.message}`);\r\n    } finally {\r\n      setIsExecuting(false);\r\n    }\r\n  };\r\n  \r\n  const handleShare = () => {\r\n    if (onShareCode && code.trim()) {\r\n      onShareCode({\r\n        code,\r\n        language,\r\n        output\r\n      });\r\n    }\r\n  };\r\n  \r\n  const clearOutput = () => {\r\n    setOutput('');\r\n  };\r\n  \r\n  const loadHistoryItem = (historyItem) => {\r\n    setCode(historyItem.code);\r\n    setLanguage(historyItem.language);\r\n    setOutput(historyItem.output);\r\n    \r\n    // Focus the textarea\r\n    textareaRef.current?.focus();\r\n  };\r\n  \r\n  return (\r\n    <Box\r\n      bg={bgColor}\r\n      borderRadius=\"md\"\r\n      borderWidth=\"1px\"\r\n      borderColor={borderColor}\r\n      mb={4}\r\n      overflow=\"hidden\"\r\n    >\r\n      <Flex\r\n        align=\"center\"\r\n        p={2}\r\n        bg={headerBgColor}\r\n        borderBottomWidth={isOpen ? \"1px\" : \"0\"}\r\n        borderColor={borderColor}\r\n        justifyContent=\"space-between\"\r\n        cursor=\"pointer\"\r\n        onClick={toggleOpen}\r\n      >\r\n        <HStack>\r\n          <IconWrapper icon={FaCode} size={14} mr={2} />\r\n          <Heading size=\"xs\">Code Execution</Heading>\r\n        </HStack>\r\n        <IconWrapper\r\n          icon={isOpen ? FaChevronUp : FaChevronDown}\r\n          size={12}\r\n        />\r\n      </Flex>\r\n      \r\n      <Collapse in={isOpen} animateOpacity>\r\n        <Box p={3}>\r\n          <HStack mb={2}>\r\n            <Select\r\n              size=\"xs\"\r\n              value={language}\r\n              onChange={handleLanguageChange}\r\n              bg={codeBgColor}\r\n              w=\"150px\"\r\n            >\r\n              <option value=\"javascript\">JavaScript</option>\r\n              <option value=\"python\">Python</option>\r\n              <option value=\"java\">Java</option>\r\n            </Select>\r\n            <Button\r\n              size=\"xs\"\r\n              leftIcon={<IconWrapper icon={FaPlay} size={10} />}\r\n              colorScheme=\"green\"\r\n              onClick={handleExecute}\r\n              isLoading={isExecuting}\r\n              loadingText=\"Running\"\r\n            >\r\n              Run\r\n            </Button>\r\n            <IconButton\r\n              size=\"xs\"\r\n              icon={<IconWrapper icon={FaSave} size={10} />}\r\n              colorScheme=\"blue\"\r\n              onClick={handleShare}\r\n              aria-label=\"Share code\"\r\n              title=\"Share in chat\"\r\n            />\r\n          </HStack>\r\n          \r\n          <Textarea\r\n            ref={textareaRef}\r\n            value={code}\r\n            onChange={(e) => setCode(e.target.value)}\r\n            placeholder=\"Write your code here...\"\r\n            size=\"sm\"\r\n            height=\"120px\"\r\n            fontFamily=\"monospace\"\r\n            bg={codeBgColor}\r\n            mb={2}\r\n          />\r\n          \r\n          {output && (\r\n            <Box>\r\n              <Flex justify=\"space-between\" align=\"center\" mb={1}>\r\n                <Text fontSize=\"xs\" fontWeight=\"bold\">Output:</Text>\r\n                <IconButton\r\n                  size=\"xs\"\r\n                  icon={<IconWrapper icon={FaTrash} size={10} />}\r\n                  variant=\"ghost\"\r\n                  onClick={clearOutput}\r\n                  aria-label=\"Clear output\"\r\n                />\r\n              </Flex>\r\n              <Box\r\n                bg={outputBgColor}\r\n                p={2}\r\n                borderRadius=\"md\"\r\n                fontFamily=\"monospace\"\r\n                fontSize=\"xs\"\r\n                whiteSpace=\"pre-wrap\"\r\n                maxHeight=\"100px\"\r\n                overflowY=\"auto\"\r\n              >\r\n                {isExecuting ? (\r\n                  <Flex justify=\"center\" p={2}>\r\n                    <Spinner size=\"sm\" />\r\n                  </Flex>\r\n                ) : (\r\n                  <Code children={output} variant=\"subtle\" />\r\n                )}\r\n              </Box>\r\n            </Box>\r\n          )}\r\n          \r\n          {execHistory.length > 0 && (\r\n            <Box mt={3}>\r\n              <Text fontSize=\"xs\" fontWeight=\"bold\" mb={1}>Recent Executions:</Text>\r\n              <VStack spacing={1} align=\"stretch\">\r\n                {execHistory.map((item) => (\r\n                  <HStack\r\n                    key={item.id}\r\n                    bg={codeBgColor}\r\n                    p={1}\r\n                    borderRadius=\"sm\"\r\n                    fontSize=\"xs\"\r\n                    cursor=\"pointer\"\r\n                    onClick={() => loadHistoryItem(item)}\r\n                    _hover={{ bg: hoverBgColor }}\r\n                  >\r\n                    <Badge colorScheme={item.language === 'javascript' ? 'yellow' : item.language === 'python' ? 'blue' : 'red'}>\r\n                      {item.language}\r\n                    </Badge>\r\n                    <Text noOfLines={1} flex=\"1\">\r\n                      {item.code.substring(0, 30)}...\r\n                    </Text>\r\n                    <Text fontSize=\"10px\" color=\"gray.500\">\r\n                      {new Date(item.timestamp).toLocaleTimeString()}\r\n                    </Text>\r\n                  </HStack>\r\n                ))}\r\n              </VStack>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Collapse>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CodeExecutionPanel; "],"names":["SelectField","forwardRef","props","ref","children","placeholder","className","rest","jsxs","chakra","select","cx","jsx","value","displayName","Select","styles","useMultiStyleConfig","rootProps","icon","color","height","h","minH","minHeight","iconColor","iconSize","omitThemingProps","layoutProps","otherProps","object","keys","picked","omitted","key","Object","entries","includes","split","layoutPropNames","ownProps","useFormControl","rootStyles","width","position","fieldStyles","paddingEnd","field","_focus","zIndex","div","__css","SelectIcon","dataAttr","disabled","fontSize","DefaultIcon","viewBox","fill","d","IconWrapper","baseStyle","display","alignItems","justifyContent","pointerEvents","top","transform","clone","cloneElement","role","focusable","style","isValidElement","Textarea","useStyleConfig","rows","textareaProps","textareaStyles","omit","textarea","Code","code","_ref","onShareCode","setCode","useState","language","setLanguage","output","setOutput","isExecuting","setIsExecuting","isOpen","setIsOpen","execHistory","setExecHistory","textareaRef","useRef","bgColor","useColorModeValue","headerBgColor","borderColor","codeBgColor","outputBgColor","hoverBgColor","_jsxs","Box","bg","borderRadius","borderWidth","mb","overflow","Flex","align","p","borderBottomWidth","cursor","onClick","toggleOpen","HStack","_jsx","FaCode","size","mr","Heading","FaChevronUp","FaChevronDown","Collapse","in","animateOpacity","onChange","e","newLang","target","w","Button","leftIcon","FaPlay","colorScheme","async","trim","result","executeCode","Promise","resolve","setTimeout","_code$match","success","match","_code$match2","historyItem","id","Date","now","timestamp","toISOString","prev","slice","error","message","isLoading","loadingText","IconButton","FaSave","handleShare","title","fontFamily","justify","Text","fontWeight","FaTrash","variant","clearOutput","whiteSpace","maxHeight","overflowY","Spinner","length","mt","VStack","spacing","map","item","_textareaRef$current","current","focus","loadHistoryItem","_hover","Badge","noOfLines","flex","substring","toLocaleTimeString"],"sourceRoot":""}