{"version":3,"file":"static/js/971.075156ee.chunk.js","mappings":"qTAoBA,MA0LA,EA1L8BA,KAC5B,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAASK,aAAaC,QAAQ,sBAAwB,KACvFC,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,CACnD,CAAES,GAAI,EAAGC,KAAM,0BAA2BC,WAAW,EAAMC,KAAM,cACjE,CAAEH,GAAI,EAAGC,KAAM,4BAA6BC,WAAW,EAAMC,KAAM,cACnE,CAAEH,GAAI,EAAGC,KAAM,gBAAiBC,WAAW,EAAOC,KAAM,SAEnDC,EAAYC,IAAiBd,EAAAA,EAAAA,UAAS,CAC3C,CAAES,GAAI,sBAAuBC,KAAM,sBAAuBK,OAAQ,aAAcJ,WAAW,GAC3F,CAAEF,GAAI,oBAAqBC,KAAM,wBAAyBK,OAAQ,aAAcJ,WAAW,GAC3F,CAAEF,GAAI,mBAAoBC,KAAM,mBAAoBK,OAAQ,aAAcJ,WAAW,KAGjFK,GAAQC,EAAAA,EAAAA,KACRC,GAAUC,EAAAA,EAAAA,IAAkB,UAAW,YACvCC,GAAcD,EAAAA,EAAAA,IAAkB,QAAS,YACzCE,GAAcF,EAAAA,EAAAA,IAAkB,WAAY,aAElDG,EAAAA,EAAAA,YAAU,KAEJnB,GACFJ,EAAYI,EACd,GACC,CAACA,IAmDJ,OACEoB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,EAAG,EAAGC,GAAIR,EAASS,aAAa,KAAKC,YAAY,MAAMP,YAAaA,EAAYQ,SAAA,EACnFC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,KAAK,KAAKC,GAAI,EAAEJ,SAAC,2BAExB1B,GAiBAoB,EAAAA,EAAAA,MAACW,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAASP,SAAA,EACjCN,EAAAA,EAAAA,MAACc,EAAAA,EAAI,CAACC,QAAQ,gBAAgBF,MAAM,SAAQP,SAAA,EAC1CC,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACC,WAAW,OAAMX,SAAE1B,KACzB2B,EAAAA,EAAAA,KAACW,EAAAA,EAAO,CAACC,MAAM,eAAcb,UAC3BC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACX,KAAK,KAAKY,QAAQ,QAAQC,QAASA,IAAMzC,EAAgB,IAAIyB,SAAC,eAM1EN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAIN,EAAaK,EAAG,EAAGE,aAAa,KAAKC,YAAY,MAAMP,YAAaA,EAAYQ,SAAA,EACvFC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,KAAK,KAAKC,GAAI,EAAEJ,SAAC,qBAC1BN,EAAAA,EAAAA,MAACuB,EAAAA,EAAM,CAAAjB,SAAA,EACLC,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACJC,YAAY,wBACZhB,KAAK,KACLiB,MAAOhD,EACPiD,SAAWC,GAAMjD,EAAeiD,EAAEC,OAAOH,UAE3CnB,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACX,KAAK,KAAKqB,YAAY,QAAQR,QA3E3BS,KACrB,GAAIrD,EAAYsD,OAAQ,CACtB,MAAMC,EAAc,8EAA8EvD,YAElGwD,UAAUC,UAAUC,UAAUH,GAC9BxC,EAAM,CACJ4C,MAAO,mBACPC,YAAa,sCACbC,OAAQ,UACRC,SAAU,IACVC,YAAY,GAEhB,MACEhD,EAAM,CACJ4C,MAAO,iBACPC,YAAa,wCACbC,OAAQ,UACRC,SAAU,IACVC,YAAY,GAEhB,EAuDwEnC,UAC5DC,EAAAA,EAAAA,KAACmC,EAAAA,EAAW,CAACC,KAAMC,EAAAA,IAASnC,KAAM,cAKxCT,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAIN,EAAaK,EAAG,EAAGE,aAAa,KAAKC,YAAY,MAAMP,YAAaA,EAAYQ,SAAA,EACvFC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,KAAK,KAAKC,GAAI,EAAEJ,SAAC,sBAC1BC,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACX,KAAK,KAAKqB,YAAY,QAAQR,QA5DnBuB,KAE3BX,UAAUC,UAAUC,UADA,qFAEpB3C,EAAM,CACJ4C,MAAO,mBACPC,YAAa,0CACbC,OAAQ,UACRC,SAAU,IACVC,YAAY,GACZ,EAmD2EK,MAAM,OAAMxC,UAC/EN,EAAAA,EAAAA,MAACuB,EAAAA,EAAM,CAAAjB,SAAA,EACLC,EAAAA,EAAAA,KAACmC,EAAAA,EAAW,CAACC,KAAMI,EAAAA,IAAStC,KAAM,MAClCF,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAAAV,SAAC,iCAGVC,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACgC,SAAS,KAAKC,GAAI,EAAGC,MAAM,WAAU5C,SAAC,0DAK9CN,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAIN,EAAaK,EAAG,EAAGE,aAAa,KAAKC,YAAY,MAAMP,YAAaA,EAAYQ,SAAA,EACvFC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,KAAK,KAAKC,GAAI,EAAEJ,SAAC,oBAC1BC,EAAAA,EAAAA,KAACI,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAASP,SAChCtB,EAAemE,KAAIC,IAClBpD,EAAAA,EAAAA,MAACc,EAAAA,EAAI,CAAeC,QAAQ,gBAAgBF,MAAM,SAAQP,SAAA,EACxDN,EAAAA,EAAAA,MAACuB,EAAAA,EAAM,CAAAjB,SAAA,CACJ8C,EAAKhE,WACJmB,EAAAA,EAAAA,KAACmC,EAAAA,EAAW,CAACC,KAAMU,EAAAA,IAAeH,MAAM,YAAYzC,KAAM,MAE1DF,EAAAA,EAAAA,KAACmC,EAAAA,EAAW,CAACC,KAAMU,EAAAA,IAAeH,MAAM,WAAWzC,KAAM,MAE3DF,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACgC,SAAS,KAAI1C,SAAE8C,EAAKjE,UAE3BiE,EAAKhE,YACJmB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAK,CAACxB,YAAY,QAAQrB,KAAK,KAAIH,SAAC,eAV9B8C,EAAKlE,YAiBtBc,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAIN,EAAaK,EAAG,EAAGE,aAAa,KAAKC,YAAY,MAAMP,YAAaA,EAAYQ,SAAA,EACvFC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,KAAK,KAAKC,GAAI,EAAEJ,SAAC,uBAC1BC,EAAAA,EAAAA,KAACI,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAASP,SAChChB,EAAW6D,KAAII,IACdvD,EAAAA,EAAAA,MAACc,EAAAA,EAAI,CAAoBC,QAAQ,gBAAgBF,MAAM,SAAQP,SAAA,EAC7DN,EAAAA,EAAAA,MAACuB,EAAAA,EAAM,CAAAjB,SAAA,CACJiD,EAAUnE,YACTmB,EAAAA,EAAAA,KAACmC,EAAAA,EAAW,CAACC,KAAMa,EAAAA,IAASN,MAAM,YAAYzC,KAAM,MAEtDF,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACgC,SAAS,KAAI1C,SAAEiD,EAAUpE,WAEjCoB,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CACLX,KAAK,KACLY,QAAQ,QACRC,QAASA,KACP3C,EAAe4E,EAAUrE,GAAG,EAC5BoB,UAEFC,EAAAA,EAAAA,KAACmC,EAAAA,EAAW,CAACC,KAAMC,EAAAA,IAASnC,KAAM,SAd3B8C,EAAUrE,eA/E7Bc,EAAAA,EAAAA,MAACW,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAAUH,GAAI,EAAEJ,SAAA,EACxCC,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACgC,SAAS,KAAI1C,SAAC,6EACpBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACJC,YAAY,sBACZC,MAAOnD,EACPoD,SAAWC,GAAMpD,EAAYoD,EAAEC,OAAOH,OACtCjB,KAAK,QAEPF,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACX,KAAK,KAAKqB,YAAY,QAAQR,QA9D1BmC,KACdlF,EAASyD,SACXlD,aAAa4E,QAAQ,oBAAqBnF,GAC1CM,EAAgBN,GAChBkB,EAAM,CACJ4C,MAAO,gBACPC,YAAa,4BAA4B/D,qBACzCgE,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEhB,EAmDiEnC,UACzDN,EAAAA,EAAAA,MAACuB,EAAAA,EAAM,CAAAjB,SAAA,EACLC,EAAAA,EAAAA,KAACmC,EAAAA,EAAW,CAACC,KAAMa,EAAAA,IAAS/C,KAAM,MAClCF,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAAAV,SAAC,2BA0FV,C","sources":["components/HackerRankIntegration.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Heading, \r\n  Text, \r\n  Button, \r\n  Input, \r\n  Flex, \r\n  VStack, \r\n  HStack, \r\n  useColorModeValue, \r\n  useToast,\r\n  Badge,\r\n  Link,\r\n  Tooltip,\r\n  Divider\r\n} from '@chakra-ui/react';\r\nimport { FaCheck, FaTrophy, FaShare, FaCode, FaUsers, FaCertificate, FaRocket } from 'react-icons/fa';\r\nimport { IconWrapper } from '../utils/IconWrapper';\r\n\r\nconst HackerRankIntegration = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [challengeId, setChallengeId] = useState('');\r\n  const [savedProfile, setSavedProfile] = useState(localStorage.getItem('hackerrankProfile') || '');\r\n  const [certifications, setCertifications] = useState([\r\n    { id: 1, name: 'Problem Solving (Basic)', completed: true, date: '2023-10-15' },\r\n    { id: 2, name: 'JavaScript (Intermediate)', completed: true, date: '2023-11-20' },\r\n    { id: 3, name: 'React (Basic)', completed: false, date: null }\r\n  ]);\r\n  const [challenges, setChallenges] = useState([\r\n    { id: 'diagonal-difference', name: 'Diagonal Difference', domain: 'Algorithms', completed: true },\r\n    { id: 'jumping-on-clouds', name: 'Jumping on the Clouds', domain: 'Algorithms', completed: true },\r\n    { id: 'counting-valleys', name: 'Counting Valleys', domain: 'Algorithms', completed: false }\r\n  ]);\r\n  \r\n  const toast = useToast();\r\n  const bgColor = useColorModeValue('blue.50', 'gray.700');\r\n  const cardBgColor = useColorModeValue('white', 'gray.800');\r\n  const borderColor = useColorModeValue('blue.200', 'gray.600');\r\n\r\n  useEffect(() => {\r\n    // Simulate loading user profile\r\n    if (savedProfile) {\r\n      setUsername(savedProfile);\r\n    }\r\n  }, [savedProfile]);\r\n\r\n  const saveProfile = () => {\r\n    if (username.trim()) {\r\n      localStorage.setItem('hackerrankProfile', username);\r\n      setSavedProfile(username);\r\n      toast({\r\n        title: 'Profile Saved',\r\n        description: `Your HackerRank profile \"${username}\" has been saved.`,\r\n        status: 'success',\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const shareChallenge = () => {\r\n    if (challengeId.trim()) {\r\n      const messageText = `Check out this HackerRank challenge: https://www.hackerrank.com/challenges/${challengeId}/problem`;\r\n      // In a real implementation, this would share to the current chat\r\n      navigator.clipboard.writeText(messageText);\r\n      toast({\r\n        title: 'Challenge Shared',\r\n        description: 'Challenge link copied to clipboard.',\r\n        status: 'success',\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: 'Input Required',\r\n        description: 'Please enter a challenge ID or title.',\r\n        status: 'warning',\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  const startPairProgramming = () => {\r\n    const messageText = `I'd like to pair program on a HackerRank challenge. Are you available to join me?`;\r\n    navigator.clipboard.writeText(messageText);\r\n    toast({\r\n      title: 'Pair Programming',\r\n      description: 'Invitation message copied to clipboard.',\r\n      status: 'success',\r\n      duration: 3000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box p={4} bg={bgColor} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n      <Heading size=\"md\" mb={4}>HackerRank Integration</Heading>\r\n      \r\n      {!savedProfile ? (\r\n        <VStack spacing={3} align=\"stretch\" mb={4}>\r\n          <Text fontSize=\"sm\">Connect your HackerRank profile to share challenges and showcase skills</Text>\r\n          <Input \r\n            placeholder=\"HackerRank Username\" \r\n            value={username} \r\n            onChange={(e) => setUsername(e.target.value)}\r\n            size=\"sm\"\r\n          />\r\n          <Button size=\"sm\" colorScheme=\"green\" onClick={saveProfile}>\r\n            <HStack>\r\n              <IconWrapper icon={FaCheck} size={14} />\r\n              <Text>Save Profile</Text>\r\n            </HStack>\r\n          </Button>\r\n        </VStack>\r\n      ) : (\r\n        <VStack spacing={4} align=\"stretch\">\r\n          <Flex justify=\"space-between\" align=\"center\">\r\n            <Text fontWeight=\"bold\">{savedProfile}</Text>\r\n            <Tooltip label=\"Edit Profile\">\r\n              <Button size=\"xs\" variant=\"ghost\" onClick={() => setSavedProfile('')}>\r\n                Edit\r\n              </Button>\r\n            </Tooltip>\r\n          </Flex>\r\n          \r\n          <Box bg={cardBgColor} p={3} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n            <Heading size=\"xs\" mb={2}>Share Challenge</Heading>\r\n            <HStack>\r\n              <Input \r\n                placeholder=\"Challenge ID or title\" \r\n                size=\"sm\" \r\n                value={challengeId} \r\n                onChange={(e) => setChallengeId(e.target.value)}\r\n              />\r\n              <Button size=\"sm\" colorScheme=\"green\" onClick={shareChallenge}>\r\n                <IconWrapper icon={FaShare} size={14} />\r\n              </Button>\r\n            </HStack>\r\n          </Box>\r\n          \r\n          <Box bg={cardBgColor} p={3} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n            <Heading size=\"xs\" mb={2}>Pair Programming</Heading>\r\n            <Button size=\"sm\" colorScheme=\"green\" onClick={startPairProgramming} width=\"full\">\r\n              <HStack>\r\n                <IconWrapper icon={FaUsers} size={14} />\r\n                <Text>Invite to Pair Program</Text>\r\n              </HStack>\r\n            </Button>\r\n            <Text fontSize=\"xs\" mt={2} color=\"gray.500\">\r\n              Collaborate in real-time on HackerRank challenges\r\n            </Text>\r\n          </Box>\r\n          \r\n          <Box bg={cardBgColor} p={3} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n            <Heading size=\"xs\" mb={3}>Certifications</Heading>\r\n            <VStack spacing={2} align=\"stretch\">\r\n              {certifications.map(cert => (\r\n                <Flex key={cert.id} justify=\"space-between\" align=\"center\">\r\n                  <HStack>\r\n                    {cert.completed ? (\r\n                      <IconWrapper icon={FaCertificate} color=\"green.500\" size={12} />\r\n                    ) : (\r\n                      <IconWrapper icon={FaCertificate} color=\"gray.400\" size={12} />\r\n                    )}\r\n                    <Text fontSize=\"sm\">{cert.name}</Text>\r\n                  </HStack>\r\n                  {cert.completed && (\r\n                    <Badge colorScheme=\"green\" size=\"sm\">Verified</Badge>\r\n                  )}\r\n                </Flex>\r\n              ))}\r\n            </VStack>\r\n          </Box>\r\n          \r\n          <Box bg={cardBgColor} p={3} borderRadius=\"md\" borderWidth=\"1px\" borderColor={borderColor}>\r\n            <Heading size=\"xs\" mb={3}>Recent Challenges</Heading>\r\n            <VStack spacing={2} align=\"stretch\">\r\n              {challenges.map(challenge => (\r\n                <Flex key={challenge.id} justify=\"space-between\" align=\"center\">\r\n                  <HStack>\r\n                    {challenge.completed && (\r\n                      <IconWrapper icon={FaCheck} color=\"green.500\" size={12} />\r\n                    )}\r\n                    <Text fontSize=\"sm\">{challenge.name}</Text>\r\n                  </HStack>\r\n                  <Button \r\n                    size=\"xs\" \r\n                    variant=\"ghost\"\r\n                    onClick={() => {\r\n                      setChallengeId(challenge.id);\r\n                    }}\r\n                  >\r\n                    <IconWrapper icon={FaShare} size={12} />\r\n                  </Button>\r\n                </Flex>\r\n              ))}\r\n            </VStack>\r\n          </Box>\r\n        </VStack>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default HackerRankIntegration; "],"names":["HackerRankIntegration","username","setUsername","useState","challengeId","setChallengeId","savedProfile","setSavedProfile","localStorage","getItem","certifications","setCertifications","id","name","completed","date","challenges","setChallenges","domain","toast","useToast","bgColor","useColorModeValue","cardBgColor","borderColor","useEffect","_jsxs","Box","p","bg","borderRadius","borderWidth","children","_jsx","Heading","size","mb","VStack","spacing","align","Flex","justify","Text","fontWeight","Tooltip","label","Button","variant","onClick","HStack","Input","placeholder","value","onChange","e","target","colorScheme","shareChallenge","trim","messageText","navigator","clipboard","writeText","title","description","status","duration","isClosable","IconWrapper","icon","FaShare","startPairProgramming","width","FaUsers","fontSize","mt","color","map","cert","FaCertificate","Badge","challenge","FaCheck","saveProfile","setItem"],"sourceRoot":""}